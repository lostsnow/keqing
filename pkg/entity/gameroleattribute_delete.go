// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gameroleattribute"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// GameRoleAttributeDelete is the builder for deleting a GameRoleAttribute entity.
type GameRoleAttributeDelete struct {
	config
	hooks    []Hook
	mutation *GameRoleAttributeMutation
}

// Where appends a list predicates to the GameRoleAttributeDelete builder.
func (grad *GameRoleAttributeDelete) Where(ps ...predicate.GameRoleAttribute) *GameRoleAttributeDelete {
	grad.mutation.Where(ps...)
	return grad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (grad *GameRoleAttributeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, GameRoleAttributeMutation](ctx, grad.sqlExec, grad.mutation, grad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (grad *GameRoleAttributeDelete) ExecX(ctx context.Context) int {
	n, err := grad.Exec(ctx)
	if err != nil {
		panic(err)
	}

	return n
}

func (grad *GameRoleAttributeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gameroleattribute.Table, sqlgraph.NewFieldSpec(gameroleattribute.FieldID, field.TypeInt64))
	if ps := grad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	affected, err := sqlgraph.DeleteNodes(ctx, grad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}

	grad.mutation.done = true

	return affected, err
}

// GameRoleAttributeDeleteOne is the builder for deleting a single GameRoleAttribute entity.
type GameRoleAttributeDeleteOne struct {
	grad *GameRoleAttributeDelete
}

// Where appends a list predicates to the GameRoleAttributeDelete builder.
func (grado *GameRoleAttributeDeleteOne) Where(ps ...predicate.GameRoleAttribute) *GameRoleAttributeDeleteOne {
	grado.grad.mutation.Where(ps...)
	return grado
}

// Exec executes the deletion query.
func (grado *GameRoleAttributeDeleteOne) Exec(ctx context.Context) error {
	n, err := grado.grad.Exec(ctx)

	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gameroleattribute.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (grado *GameRoleAttributeDeleteOne) ExecX(ctx context.Context) {
	if err := grado.Exec(ctx); err != nil {
		panic(err)
	}
}
