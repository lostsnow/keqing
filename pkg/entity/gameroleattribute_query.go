// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gameroleattribute"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// GameRoleAttributeQuery is the builder for querying GameRoleAttribute entities.
type GameRoleAttributeQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.GameRoleAttribute
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameRoleAttributeQuery builder.
func (graq *GameRoleAttributeQuery) Where(ps ...predicate.GameRoleAttribute) *GameRoleAttributeQuery {
	graq.predicates = append(graq.predicates, ps...)
	return graq
}

// Limit the number of records to be returned by this query.
func (graq *GameRoleAttributeQuery) Limit(limit int) *GameRoleAttributeQuery {
	graq.ctx.Limit = &limit
	return graq
}

// Offset to start from.
func (graq *GameRoleAttributeQuery) Offset(offset int) *GameRoleAttributeQuery {
	graq.ctx.Offset = &offset
	return graq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (graq *GameRoleAttributeQuery) Unique(unique bool) *GameRoleAttributeQuery {
	graq.ctx.Unique = &unique
	return graq
}

// Order specifies how the records should be ordered.
func (graq *GameRoleAttributeQuery) Order(o ...OrderFunc) *GameRoleAttributeQuery {
	graq.order = append(graq.order, o...)
	return graq
}

// First returns the first GameRoleAttribute entity from the query.
// Returns a *NotFoundError when no GameRoleAttribute was found.
func (graq *GameRoleAttributeQuery) First(ctx context.Context) (*GameRoleAttribute, error) {
	nodes, err := graq.Limit(1).All(setContextOp(ctx, graq.ctx, "First"))
	if err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nil, &NotFoundError{gameroleattribute.Label}
	}

	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) FirstX(ctx context.Context) *GameRoleAttribute {
	node, err := graq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}

	return node
}

// FirstID returns the first GameRoleAttribute ID from the query.
// Returns a *NotFoundError when no GameRoleAttribute ID was found.
func (graq *GameRoleAttributeQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64

	if ids, err = graq.Limit(1).IDs(setContextOp(ctx, graq.ctx, "FirstID")); err != nil {
		return
	}

	if len(ids) == 0 {
		err = &NotFoundError{gameroleattribute.Label}
		return
	}

	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) FirstIDX(ctx context.Context) int64 {
	id, err := graq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}

	return id
}

// Only returns a single GameRoleAttribute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameRoleAttribute entity is found.
// Returns a *NotFoundError when no GameRoleAttribute entities are found.
func (graq *GameRoleAttributeQuery) Only(ctx context.Context) (*GameRoleAttribute, error) {
	nodes, err := graq.Limit(2).All(setContextOp(ctx, graq.ctx, "Only"))
	if err != nil {
		return nil, err
	}

	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameroleattribute.Label}
	default:
		return nil, &NotSingularError{gameroleattribute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) OnlyX(ctx context.Context) *GameRoleAttribute {
	node, err := graq.Only(ctx)
	if err != nil {
		panic(err)
	}

	return node
}

// OnlyID is like Only, but returns the only GameRoleAttribute ID in the query.
// Returns a *NotSingularError when more than one GameRoleAttribute ID is found.
// Returns a *NotFoundError when no entities are found.
func (graq *GameRoleAttributeQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64

	if ids, err = graq.Limit(2).IDs(setContextOp(ctx, graq.ctx, "OnlyID")); err != nil {
		return
	}

	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gameroleattribute.Label}
	default:
		err = &NotSingularError{gameroleattribute.Label}
	}

	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := graq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}

	return id
}

// All executes the query and returns a list of GameRoleAttributes.
func (graq *GameRoleAttributeQuery) All(ctx context.Context) ([]*GameRoleAttribute, error) {
	ctx = setContextOp(ctx, graq.ctx, "All")
	if err := graq.prepareQuery(ctx); err != nil {
		return nil, err
	}

	qr := querierAll[[]*GameRoleAttribute, *GameRoleAttributeQuery]()

	return withInterceptors[[]*GameRoleAttribute](ctx, graq, qr, graq.inters)
}

// AllX is like All, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) AllX(ctx context.Context) []*GameRoleAttribute {
	nodes, err := graq.All(ctx)
	if err != nil {
		panic(err)
	}

	return nodes
}

// IDs executes the query and returns a list of GameRoleAttribute IDs.
func (graq *GameRoleAttributeQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if graq.ctx.Unique == nil && graq.path != nil {
		graq.Unique(true)
	}

	ctx = setContextOp(ctx, graq.ctx, "IDs")
	if err = graq.Select(gameroleattribute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}

	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) IDsX(ctx context.Context) []int64 {
	ids, err := graq.IDs(ctx)
	if err != nil {
		panic(err)
	}

	return ids
}

// Count returns the count of the given query.
func (graq *GameRoleAttributeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, graq.ctx, "Count")
	if err := graq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	return withInterceptors[int](ctx, graq, querierCount[*GameRoleAttributeQuery](), graq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) CountX(ctx context.Context) int {
	count, err := graq.Count(ctx)
	if err != nil {
		panic(err)
	}

	return count
}

// Exist returns true if the query has elements in the graph.
func (graq *GameRoleAttributeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, graq.ctx, "Exist")

	switch _, err := graq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entity: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (graq *GameRoleAttributeQuery) ExistX(ctx context.Context) bool {
	exist, err := graq.Exist(ctx)
	if err != nil {
		panic(err)
	}

	return exist
}

// Clone returns a duplicate of the GameRoleAttributeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (graq *GameRoleAttributeQuery) Clone() *GameRoleAttributeQuery {
	if graq == nil {
		return nil
	}

	return &GameRoleAttributeQuery{
		config:     graq.config,
		ctx:        graq.ctx.Clone(),
		order:      append([]OrderFunc{}, graq.order...),
		inters:     append([]Interceptor{}, graq.inters...),
		predicates: append([]predicate.GameRoleAttribute{}, graq.predicates...),
		// clone intermediate query.
		sql:  graq.sql.Clone(),
		path: graq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameRoleAttribute.Query().
//		GroupBy(gameroleattribute.FieldUserID).
//		Aggregate(entity.Count()).
//		Scan(ctx, &v)
func (graq *GameRoleAttributeQuery) GroupBy(field string, fields ...string) *GameRoleAttributeGroupBy {
	graq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameRoleAttributeGroupBy{build: graq}
	grbuild.flds = &graq.ctx.Fields
	grbuild.label = gameroleattribute.Label
	grbuild.scan = grbuild.Scan

	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//	}
//
//	client.GameRoleAttribute.Query().
//		Select(gameroleattribute.FieldUserID).
//		Scan(ctx, &v)
func (graq *GameRoleAttributeQuery) Select(fields ...string) *GameRoleAttributeSelect {
	graq.ctx.Fields = append(graq.ctx.Fields, fields...)
	sbuild := &GameRoleAttributeSelect{GameRoleAttributeQuery: graq}
	sbuild.label = gameroleattribute.Label
	sbuild.flds, sbuild.scan = &graq.ctx.Fields, sbuild.Scan

	return sbuild
}

// Aggregate returns a GameRoleAttributeSelect configured with the given aggregations.
func (graq *GameRoleAttributeQuery) Aggregate(fns ...AggregateFunc) *GameRoleAttributeSelect {
	return graq.Select().Aggregate(fns...)
}

func (graq *GameRoleAttributeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range graq.inters {
		if inter == nil {
			return fmt.Errorf("entity: uninitialized interceptor (forgotten import entity/runtime?)")
		}

		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, graq); err != nil {
				return err
			}
		}
	}

	for _, f := range graq.ctx.Fields {
		if !gameroleattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
		}
	}

	if graq.path != nil {
		prev, err := graq.path(ctx)
		if err != nil {
			return err
		}

		graq.sql = prev
	}

	return nil
}

func (graq *GameRoleAttributeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameRoleAttribute, error) {
	var (
		nodes = []*GameRoleAttribute{}
		_spec = graq.querySpec()
	)

	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameRoleAttribute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameRoleAttribute{config: graq.config}
		nodes = append(nodes, node)

		return node.assignValues(columns, values)
	}

	if len(graq.modifiers) > 0 {
		_spec.Modifiers = graq.modifiers
	}

	for i := range hooks {
		hooks[i](ctx, _spec)
	}

	if err := sqlgraph.QueryNodes(ctx, graq.driver, _spec); err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nodes, nil
	}

	return nodes, nil
}

func (graq *GameRoleAttributeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := graq.querySpec()
	if len(graq.modifiers) > 0 {
		_spec.Modifiers = graq.modifiers
	}

	_spec.Node.Columns = graq.ctx.Fields
	if len(graq.ctx.Fields) > 0 {
		_spec.Unique = graq.ctx.Unique != nil && *graq.ctx.Unique
	}

	return sqlgraph.CountNodes(ctx, graq.driver, _spec)
}

func (graq *GameRoleAttributeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gameroleattribute.Table, gameroleattribute.Columns, sqlgraph.NewFieldSpec(gameroleattribute.FieldID, field.TypeInt64))
	_spec.From = graq.sql

	if unique := graq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if graq.path != nil {
		_spec.Unique = true
	}

	if fields := graq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameroleattribute.FieldID)

		for i := range fields {
			if fields[i] != gameroleattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}

	if ps := graq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	if limit := graq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}

	if offset := graq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}

	if ps := graq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	return _spec
}

func (graq *GameRoleAttributeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(graq.driver.Dialect())
	t1 := builder.Table(gameroleattribute.Table)

	columns := graq.ctx.Fields
	if len(columns) == 0 {
		columns = gameroleattribute.Columns
	}

	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if graq.sql != nil {
		selector = graq.sql
		selector.Select(selector.Columns(columns...)...)
	}

	if graq.ctx.Unique != nil && *graq.ctx.Unique {
		selector.Distinct()
	}

	for _, m := range graq.modifiers {
		m(selector)
	}

	for _, p := range graq.predicates {
		p(selector)
	}

	for _, p := range graq.order {
		p(selector)
	}

	if offset := graq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}

	if limit := graq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}

	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (graq *GameRoleAttributeQuery) ForUpdate(opts ...sql.LockOption) *GameRoleAttributeQuery {
	if graq.driver.Dialect() == dialect.Postgres {
		graq.Unique(false)
	}

	graq.modifiers = append(graq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})

	return graq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (graq *GameRoleAttributeQuery) ForShare(opts ...sql.LockOption) *GameRoleAttributeQuery {
	if graq.driver.Dialect() == dialect.Postgres {
		graq.Unique(false)
	}

	graq.modifiers = append(graq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})

	return graq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (graq *GameRoleAttributeQuery) Modify(modifiers ...func(s *sql.Selector)) *GameRoleAttributeSelect {
	graq.modifiers = append(graq.modifiers, modifiers...)
	return graq.Select()
}

// GameRoleAttributeGroupBy is the group-by builder for GameRoleAttribute entities.
type GameRoleAttributeGroupBy struct {
	selector
	build *GameRoleAttributeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gragb *GameRoleAttributeGroupBy) Aggregate(fns ...AggregateFunc) *GameRoleAttributeGroupBy {
	gragb.fns = append(gragb.fns, fns...)
	return gragb
}

// Scan applies the selector query and scans the result into the given value.
func (gragb *GameRoleAttributeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gragb.build.ctx, "GroupBy")
	if err := gragb.build.prepareQuery(ctx); err != nil {
		return err
	}

	return scanWithInterceptors[*GameRoleAttributeQuery, *GameRoleAttributeGroupBy](ctx, gragb.build, gragb, gragb.build.inters, v)
}

func (gragb *GameRoleAttributeGroupBy) sqlScan(ctx context.Context, root *GameRoleAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gragb.fns))

	for _, fn := range gragb.fns {
		aggregation = append(aggregation, fn(selector))
	}

	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gragb.flds)+len(gragb.fns))
		for _, f := range *gragb.flds {
			columns = append(columns, selector.C(f))
		}

		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}

	selector.GroupBy(selector.Columns(*gragb.flds...)...)

	if err := selector.Err(); err != nil {
		return err
	}

	rows := &sql.Rows{}
	query, args := selector.Query()

	if err := gragb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}

	defer rows.Close()

	return sql.ScanSlice(rows, v)
}

// GameRoleAttributeSelect is the builder for selecting fields of GameRoleAttribute entities.
type GameRoleAttributeSelect struct {
	*GameRoleAttributeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gras *GameRoleAttributeSelect) Aggregate(fns ...AggregateFunc) *GameRoleAttributeSelect {
	gras.fns = append(gras.fns, fns...)
	return gras
}

// Scan applies the selector query and scans the result into the given value.
func (gras *GameRoleAttributeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gras.ctx, "Select")
	if err := gras.prepareQuery(ctx); err != nil {
		return err
	}

	return scanWithInterceptors[*GameRoleAttributeQuery, *GameRoleAttributeSelect](ctx, gras.GameRoleAttributeQuery, gras, gras.inters, v)
}

func (gras *GameRoleAttributeSelect) sqlScan(ctx context.Context, root *GameRoleAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gras.fns))

	for _, fn := range gras.fns {
		aggregation = append(aggregation, fn(selector))
	}

	switch n := len(*gras.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}

	rows := &sql.Rows{}
	query, args := selector.Query()

	if err := gras.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}

	defer rows.Close()

	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (gras *GameRoleAttributeSelect) Modify(modifiers ...func(s *sql.Selector)) *GameRoleAttributeSelect {
	gras.modifiers = append(gras.modifiers, modifiers...)
	return gras
}
