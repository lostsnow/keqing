// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gamerole"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// GameRoleUpdate is the builder for updating GameRole entities.
type GameRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *GameRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GameRoleUpdate builder.
func (gru *GameRoleUpdate) Where(ps ...predicate.GameRole) *GameRoleUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetUserID sets the "user_id" field.
func (gru *GameRoleUpdate) SetUserID(i int64) *GameRoleUpdate {
	gru.mutation.ResetUserID()
	gru.mutation.SetUserID(i)
	return gru
}

// AddUserID adds i to the "user_id" field.
func (gru *GameRoleUpdate) AddUserID(i int64) *GameRoleUpdate {
	gru.mutation.AddUserID(i)
	return gru
}

// SetAccountID sets the "account_id" field.
func (gru *GameRoleUpdate) SetAccountID(s string) *GameRoleUpdate {
	gru.mutation.SetAccountID(s)
	return gru
}

// SetRoleID sets the "role_id" field.
func (gru *GameRoleUpdate) SetRoleID(s string) *GameRoleUpdate {
	gru.mutation.SetRoleID(s)
	return gru
}

// SetLevel sets the "level" field.
func (gru *GameRoleUpdate) SetLevel(i int) *GameRoleUpdate {
	gru.mutation.ResetLevel()
	gru.mutation.SetLevel(i)
	return gru
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (gru *GameRoleUpdate) SetNillableLevel(i *int) *GameRoleUpdate {
	if i != nil {
		gru.SetLevel(*i)
	}
	return gru
}

// AddLevel adds i to the "level" field.
func (gru *GameRoleUpdate) AddLevel(i int) *GameRoleUpdate {
	gru.mutation.AddLevel(i)
	return gru
}

// SetRegion sets the "region" field.
func (gru *GameRoleUpdate) SetRegion(s string) *GameRoleUpdate {
	gru.mutation.SetRegion(s)
	return gru
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (gru *GameRoleUpdate) SetNillableRegion(s *string) *GameRoleUpdate {
	if s != nil {
		gru.SetRegion(*s)
	}
	return gru
}

// SetRegionName sets the "region_name" field.
func (gru *GameRoleUpdate) SetRegionName(s string) *GameRoleUpdate {
	gru.mutation.SetRegionName(s)
	return gru
}

// SetNillableRegionName sets the "region_name" field if the given value is not nil.
func (gru *GameRoleUpdate) SetNillableRegionName(s *string) *GameRoleUpdate {
	if s != nil {
		gru.SetRegionName(*s)
	}
	return gru
}

// SetNickName sets the "nick_name" field.
func (gru *GameRoleUpdate) SetNickName(s string) *GameRoleUpdate {
	gru.mutation.SetNickName(s)
	return gru
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (gru *GameRoleUpdate) SetNillableNickName(s *string) *GameRoleUpdate {
	if s != nil {
		gru.SetNickName(*s)
	}
	return gru
}

// SetUpdateAt sets the "update_at" field.
func (gru *GameRoleUpdate) SetUpdateAt(t time.Time) *GameRoleUpdate {
	gru.mutation.SetUpdateAt(t)
	return gru
}

// Mutation returns the GameRoleMutation object of the builder.
func (gru *GameRoleUpdate) Mutation() *GameRoleMutation {
	return gru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GameRoleUpdate) Save(ctx context.Context) (int, error) {
	gru.defaults()
	return withHooks[int, GameRoleMutation](ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GameRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GameRoleUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GameRoleUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GameRoleUpdate) defaults() {
	if _, ok := gru.mutation.UpdateAt(); !ok {
		v := gamerole.UpdateDefaultUpdateAt()
		gru.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GameRoleUpdate) check() error {
	if v, ok := gru.mutation.AccountID(); ok {
		if err := gamerole.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameRole.account_id": %w`, err)}
		}
	}
	if v, ok := gru.mutation.RoleID(); ok {
		if err := gamerole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`entity: validator failed for field "GameRole.role_id": %w`, err)}
		}
	}
	if v, ok := gru.mutation.Region(); ok {
		if err := gamerole.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`entity: validator failed for field "GameRole.region": %w`, err)}
		}
	}
	if v, ok := gru.mutation.RegionName(); ok {
		if err := gamerole.RegionNameValidator(v); err != nil {
			return &ValidationError{Name: "region_name", err: fmt.Errorf(`entity: validator failed for field "GameRole.region_name": %w`, err)}
		}
	}
	if v, ok := gru.mutation.NickName(); ok {
		if err := gamerole.NickNameValidator(v); err != nil {
			return &ValidationError{Name: "nick_name", err: fmt.Errorf(`entity: validator failed for field "GameRole.nick_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gru *GameRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameRoleUpdate {
	gru.modifiers = append(gru.modifiers, modifiers...)
	return gru
}

func (gru *GameRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamerole.Table, gamerole.Columns, sqlgraph.NewFieldSpec(gamerole.FieldID, field.TypeInt64))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.UserID(); ok {
		_spec.SetField(gamerole.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gru.mutation.AddedUserID(); ok {
		_spec.AddField(gamerole.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gru.mutation.AccountID(); ok {
		_spec.SetField(gamerole.FieldAccountID, field.TypeString, value)
	}
	if value, ok := gru.mutation.RoleID(); ok {
		_spec.SetField(gamerole.FieldRoleID, field.TypeString, value)
	}
	if value, ok := gru.mutation.Level(); ok {
		_spec.SetField(gamerole.FieldLevel, field.TypeInt, value)
	}
	if value, ok := gru.mutation.AddedLevel(); ok {
		_spec.AddField(gamerole.FieldLevel, field.TypeInt, value)
	}
	if value, ok := gru.mutation.Region(); ok {
		_spec.SetField(gamerole.FieldRegion, field.TypeString, value)
	}
	if value, ok := gru.mutation.RegionName(); ok {
		_spec.SetField(gamerole.FieldRegionName, field.TypeString, value)
	}
	if value, ok := gru.mutation.NickName(); ok {
		_spec.SetField(gamerole.FieldNickName, field.TypeString, value)
	}
	if value, ok := gru.mutation.UpdateAt(); ok {
		_spec.SetField(gamerole.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(gru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamerole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GameRoleUpdateOne is the builder for updating a single GameRole entity.
type GameRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GameRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (gruo *GameRoleUpdateOne) SetUserID(i int64) *GameRoleUpdateOne {
	gruo.mutation.ResetUserID()
	gruo.mutation.SetUserID(i)
	return gruo
}

// AddUserID adds i to the "user_id" field.
func (gruo *GameRoleUpdateOne) AddUserID(i int64) *GameRoleUpdateOne {
	gruo.mutation.AddUserID(i)
	return gruo
}

// SetAccountID sets the "account_id" field.
func (gruo *GameRoleUpdateOne) SetAccountID(s string) *GameRoleUpdateOne {
	gruo.mutation.SetAccountID(s)
	return gruo
}

// SetRoleID sets the "role_id" field.
func (gruo *GameRoleUpdateOne) SetRoleID(s string) *GameRoleUpdateOne {
	gruo.mutation.SetRoleID(s)
	return gruo
}

// SetLevel sets the "level" field.
func (gruo *GameRoleUpdateOne) SetLevel(i int) *GameRoleUpdateOne {
	gruo.mutation.ResetLevel()
	gruo.mutation.SetLevel(i)
	return gruo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (gruo *GameRoleUpdateOne) SetNillableLevel(i *int) *GameRoleUpdateOne {
	if i != nil {
		gruo.SetLevel(*i)
	}
	return gruo
}

// AddLevel adds i to the "level" field.
func (gruo *GameRoleUpdateOne) AddLevel(i int) *GameRoleUpdateOne {
	gruo.mutation.AddLevel(i)
	return gruo
}

// SetRegion sets the "region" field.
func (gruo *GameRoleUpdateOne) SetRegion(s string) *GameRoleUpdateOne {
	gruo.mutation.SetRegion(s)
	return gruo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (gruo *GameRoleUpdateOne) SetNillableRegion(s *string) *GameRoleUpdateOne {
	if s != nil {
		gruo.SetRegion(*s)
	}
	return gruo
}

// SetRegionName sets the "region_name" field.
func (gruo *GameRoleUpdateOne) SetRegionName(s string) *GameRoleUpdateOne {
	gruo.mutation.SetRegionName(s)
	return gruo
}

// SetNillableRegionName sets the "region_name" field if the given value is not nil.
func (gruo *GameRoleUpdateOne) SetNillableRegionName(s *string) *GameRoleUpdateOne {
	if s != nil {
		gruo.SetRegionName(*s)
	}
	return gruo
}

// SetNickName sets the "nick_name" field.
func (gruo *GameRoleUpdateOne) SetNickName(s string) *GameRoleUpdateOne {
	gruo.mutation.SetNickName(s)
	return gruo
}

// SetNillableNickName sets the "nick_name" field if the given value is not nil.
func (gruo *GameRoleUpdateOne) SetNillableNickName(s *string) *GameRoleUpdateOne {
	if s != nil {
		gruo.SetNickName(*s)
	}
	return gruo
}

// SetUpdateAt sets the "update_at" field.
func (gruo *GameRoleUpdateOne) SetUpdateAt(t time.Time) *GameRoleUpdateOne {
	gruo.mutation.SetUpdateAt(t)
	return gruo
}

// Mutation returns the GameRoleMutation object of the builder.
func (gruo *GameRoleUpdateOne) Mutation() *GameRoleMutation {
	return gruo.mutation
}

// Where appends a list predicates to the GameRoleUpdate builder.
func (gruo *GameRoleUpdateOne) Where(ps ...predicate.GameRole) *GameRoleUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GameRoleUpdateOne) Select(field string, fields ...string) *GameRoleUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GameRole entity.
func (gruo *GameRoleUpdateOne) Save(ctx context.Context) (*GameRole, error) {
	gruo.defaults()
	return withHooks[*GameRole, GameRoleMutation](ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GameRoleUpdateOne) SaveX(ctx context.Context) *GameRole {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GameRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GameRoleUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GameRoleUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdateAt(); !ok {
		v := gamerole.UpdateDefaultUpdateAt()
		gruo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GameRoleUpdateOne) check() error {
	if v, ok := gruo.mutation.AccountID(); ok {
		if err := gamerole.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameRole.account_id": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.RoleID(); ok {
		if err := gamerole.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`entity: validator failed for field "GameRole.role_id": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.Region(); ok {
		if err := gamerole.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`entity: validator failed for field "GameRole.region": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.RegionName(); ok {
		if err := gamerole.RegionNameValidator(v); err != nil {
			return &ValidationError{Name: "region_name", err: fmt.Errorf(`entity: validator failed for field "GameRole.region_name": %w`, err)}
		}
	}
	if v, ok := gruo.mutation.NickName(); ok {
		if err := gamerole.NickNameValidator(v); err != nil {
			return &ValidationError{Name: "nick_name", err: fmt.Errorf(`entity: validator failed for field "GameRole.nick_name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gruo *GameRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameRoleUpdateOne {
	gruo.modifiers = append(gruo.modifiers, modifiers...)
	return gruo
}

func (gruo *GameRoleUpdateOne) sqlSave(ctx context.Context) (_node *GameRole, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamerole.Table, gamerole.Columns, sqlgraph.NewFieldSpec(gamerole.FieldID, field.TypeInt64))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "GameRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamerole.FieldID)
		for _, f := range fields {
			if !gamerole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != gamerole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.UserID(); ok {
		_spec.SetField(gamerole.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gruo.mutation.AddedUserID(); ok {
		_spec.AddField(gamerole.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gruo.mutation.AccountID(); ok {
		_spec.SetField(gamerole.FieldAccountID, field.TypeString, value)
	}
	if value, ok := gruo.mutation.RoleID(); ok {
		_spec.SetField(gamerole.FieldRoleID, field.TypeString, value)
	}
	if value, ok := gruo.mutation.Level(); ok {
		_spec.SetField(gamerole.FieldLevel, field.TypeInt, value)
	}
	if value, ok := gruo.mutation.AddedLevel(); ok {
		_spec.AddField(gamerole.FieldLevel, field.TypeInt, value)
	}
	if value, ok := gruo.mutation.Region(); ok {
		_spec.SetField(gamerole.FieldRegion, field.TypeString, value)
	}
	if value, ok := gruo.mutation.RegionName(); ok {
		_spec.SetField(gamerole.FieldRegionName, field.TypeString, value)
	}
	if value, ok := gruo.mutation.NickName(); ok {
		_spec.SetField(gamerole.FieldNickName, field.TypeString, value)
	}
	if value, ok := gruo.mutation.UpdateAt(); ok {
		_spec.SetField(gamerole.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(gruo.modifiers...)
	_node = &GameRole{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamerole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
