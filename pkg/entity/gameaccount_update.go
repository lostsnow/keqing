// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gameaccount"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// GameAccountUpdate is the builder for updating GameAccount entities.
type GameAccountUpdate struct {
	config
	hooks     []Hook
	mutation  *GameAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GameAccountUpdate builder.
func (gau *GameAccountUpdate) Where(ps ...predicate.GameAccount) *GameAccountUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUserID sets the "user_id" field.
func (gau *GameAccountUpdate) SetUserID(i int64) *GameAccountUpdate {
	gau.mutation.ResetUserID()
	gau.mutation.SetUserID(i)
	return gau
}

// AddUserID adds i to the "user_id" field.
func (gau *GameAccountUpdate) AddUserID(i int64) *GameAccountUpdate {
	gau.mutation.AddUserID(i)
	return gau
}

// SetAccountID sets the "account_id" field.
func (gau *GameAccountUpdate) SetAccountID(s string) *GameAccountUpdate {
	gau.mutation.SetAccountID(s)
	return gau
}

// SetGameToken sets the "game_token" field.
func (gau *GameAccountUpdate) SetGameToken(s string) *GameAccountUpdate {
	gau.mutation.SetGameToken(s)
	return gau
}

// SetNillableGameToken sets the "game_token" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableGameToken(s *string) *GameAccountUpdate {
	if s != nil {
		gau.SetGameToken(*s)
	}
	return gau
}

// SetCookieToken sets the "cookie_token" field.
func (gau *GameAccountUpdate) SetCookieToken(s string) *GameAccountUpdate {
	gau.mutation.SetCookieToken(s)
	return gau
}

// SetNillableCookieToken sets the "cookie_token" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableCookieToken(s *string) *GameAccountUpdate {
	if s != nil {
		gau.SetCookieToken(*s)
	}
	return gau
}

// SetStoken sets the "stoken" field.
func (gau *GameAccountUpdate) SetStoken(s string) *GameAccountUpdate {
	gau.mutation.SetStoken(s)
	return gau
}

// SetNillableStoken sets the "stoken" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableStoken(s *string) *GameAccountUpdate {
	if s != nil {
		gau.SetStoken(*s)
	}
	return gau
}

// SetMid sets the "mid" field.
func (gau *GameAccountUpdate) SetMid(s string) *GameAccountUpdate {
	gau.mutation.SetMid(s)
	return gau
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (gau *GameAccountUpdate) SetNillableMid(s *string) *GameAccountUpdate {
	if s != nil {
		gau.SetMid(*s)
	}
	return gau
}

// SetUpdateAt sets the "update_at" field.
func (gau *GameAccountUpdate) SetUpdateAt(t time.Time) *GameAccountUpdate {
	gau.mutation.SetUpdateAt(t)
	return gau
}

// Mutation returns the GameAccountMutation object of the builder.
func (gau *GameAccountUpdate) Mutation() *GameAccountMutation {
	return gau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GameAccountUpdate) Save(ctx context.Context) (int, error) {
	gau.defaults()
	return withHooks[int, GameAccountMutation](ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GameAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GameAccountUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GameAccountUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GameAccountUpdate) defaults() {
	if _, ok := gau.mutation.UpdateAt(); !ok {
		v := gameaccount.UpdateDefaultUpdateAt()
		gau.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gau *GameAccountUpdate) check() error {
	if v, ok := gau.mutation.AccountID(); ok {
		if err := gameaccount.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameAccount.account_id": %w`, err)}
		}
	}
	if v, ok := gau.mutation.GameToken(); ok {
		if err := gameaccount.GameTokenValidator(v); err != nil {
			return &ValidationError{Name: "game_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.game_token": %w`, err)}
		}
	}
	if v, ok := gau.mutation.CookieToken(); ok {
		if err := gameaccount.CookieTokenValidator(v); err != nil {
			return &ValidationError{Name: "cookie_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.cookie_token": %w`, err)}
		}
	}
	if v, ok := gau.mutation.Mid(); ok {
		if err := gameaccount.MidValidator(v); err != nil {
			return &ValidationError{Name: "mid", err: fmt.Errorf(`entity: validator failed for field "GameAccount.mid": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gau *GameAccountUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameAccountUpdate {
	gau.modifiers = append(gau.modifiers, modifiers...)
	return gau
}

func (gau *GameAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameaccount.Table, gameaccount.Columns, sqlgraph.NewFieldSpec(gameaccount.FieldID, field.TypeInt64))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UserID(); ok {
		_spec.SetField(gameaccount.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gau.mutation.AddedUserID(); ok {
		_spec.AddField(gameaccount.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gau.mutation.AccountID(); ok {
		_spec.SetField(gameaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := gau.mutation.GameToken(); ok {
		_spec.SetField(gameaccount.FieldGameToken, field.TypeString, value)
	}
	if value, ok := gau.mutation.CookieToken(); ok {
		_spec.SetField(gameaccount.FieldCookieToken, field.TypeString, value)
	}
	if value, ok := gau.mutation.Stoken(); ok {
		_spec.SetField(gameaccount.FieldStoken, field.TypeString, value)
	}
	if value, ok := gau.mutation.Mid(); ok {
		_spec.SetField(gameaccount.FieldMid, field.TypeString, value)
	}
	if value, ok := gau.mutation.UpdateAt(); ok {
		_spec.SetField(gameaccount.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(gau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GameAccountUpdateOne is the builder for updating a single GameAccount entity.
type GameAccountUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GameAccountMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUserID sets the "user_id" field.
func (gauo *GameAccountUpdateOne) SetUserID(i int64) *GameAccountUpdateOne {
	gauo.mutation.ResetUserID()
	gauo.mutation.SetUserID(i)
	return gauo
}

// AddUserID adds i to the "user_id" field.
func (gauo *GameAccountUpdateOne) AddUserID(i int64) *GameAccountUpdateOne {
	gauo.mutation.AddUserID(i)
	return gauo
}

// SetAccountID sets the "account_id" field.
func (gauo *GameAccountUpdateOne) SetAccountID(s string) *GameAccountUpdateOne {
	gauo.mutation.SetAccountID(s)
	return gauo
}

// SetGameToken sets the "game_token" field.
func (gauo *GameAccountUpdateOne) SetGameToken(s string) *GameAccountUpdateOne {
	gauo.mutation.SetGameToken(s)
	return gauo
}

// SetNillableGameToken sets the "game_token" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableGameToken(s *string) *GameAccountUpdateOne {
	if s != nil {
		gauo.SetGameToken(*s)
	}
	return gauo
}

// SetCookieToken sets the "cookie_token" field.
func (gauo *GameAccountUpdateOne) SetCookieToken(s string) *GameAccountUpdateOne {
	gauo.mutation.SetCookieToken(s)
	return gauo
}

// SetNillableCookieToken sets the "cookie_token" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableCookieToken(s *string) *GameAccountUpdateOne {
	if s != nil {
		gauo.SetCookieToken(*s)
	}
	return gauo
}

// SetStoken sets the "stoken" field.
func (gauo *GameAccountUpdateOne) SetStoken(s string) *GameAccountUpdateOne {
	gauo.mutation.SetStoken(s)
	return gauo
}

// SetNillableStoken sets the "stoken" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableStoken(s *string) *GameAccountUpdateOne {
	if s != nil {
		gauo.SetStoken(*s)
	}
	return gauo
}

// SetMid sets the "mid" field.
func (gauo *GameAccountUpdateOne) SetMid(s string) *GameAccountUpdateOne {
	gauo.mutation.SetMid(s)
	return gauo
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (gauo *GameAccountUpdateOne) SetNillableMid(s *string) *GameAccountUpdateOne {
	if s != nil {
		gauo.SetMid(*s)
	}
	return gauo
}

// SetUpdateAt sets the "update_at" field.
func (gauo *GameAccountUpdateOne) SetUpdateAt(t time.Time) *GameAccountUpdateOne {
	gauo.mutation.SetUpdateAt(t)
	return gauo
}

// Mutation returns the GameAccountMutation object of the builder.
func (gauo *GameAccountUpdateOne) Mutation() *GameAccountMutation {
	return gauo.mutation
}

// Where appends a list predicates to the GameAccountUpdate builder.
func (gauo *GameAccountUpdateOne) Where(ps ...predicate.GameAccount) *GameAccountUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GameAccountUpdateOne) Select(field string, fields ...string) *GameAccountUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GameAccount entity.
func (gauo *GameAccountUpdateOne) Save(ctx context.Context) (*GameAccount, error) {
	gauo.defaults()
	return withHooks[*GameAccount, GameAccountMutation](ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GameAccountUpdateOne) SaveX(ctx context.Context) *GameAccount {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GameAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GameAccountUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GameAccountUpdateOne) defaults() {
	if _, ok := gauo.mutation.UpdateAt(); !ok {
		v := gameaccount.UpdateDefaultUpdateAt()
		gauo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GameAccountUpdateOne) check() error {
	if v, ok := gauo.mutation.AccountID(); ok {
		if err := gameaccount.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameAccount.account_id": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.GameToken(); ok {
		if err := gameaccount.GameTokenValidator(v); err != nil {
			return &ValidationError{Name: "game_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.game_token": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.CookieToken(); ok {
		if err := gameaccount.CookieTokenValidator(v); err != nil {
			return &ValidationError{Name: "cookie_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.cookie_token": %w`, err)}
		}
	}
	if v, ok := gauo.mutation.Mid(); ok {
		if err := gameaccount.MidValidator(v); err != nil {
			return &ValidationError{Name: "mid", err: fmt.Errorf(`entity: validator failed for field "GameAccount.mid": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gauo *GameAccountUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameAccountUpdateOne {
	gauo.modifiers = append(gauo.modifiers, modifiers...)
	return gauo
}

func (gauo *GameAccountUpdateOne) sqlSave(ctx context.Context) (_node *GameAccount, err error) {
	if err := gauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gameaccount.Table, gameaccount.Columns, sqlgraph.NewFieldSpec(gameaccount.FieldID, field.TypeInt64))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "GameAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gameaccount.FieldID)
		for _, f := range fields {
			if !gameaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != gameaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UserID(); ok {
		_spec.SetField(gameaccount.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gauo.mutation.AddedUserID(); ok {
		_spec.AddField(gameaccount.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := gauo.mutation.AccountID(); ok {
		_spec.SetField(gameaccount.FieldAccountID, field.TypeString, value)
	}
	if value, ok := gauo.mutation.GameToken(); ok {
		_spec.SetField(gameaccount.FieldGameToken, field.TypeString, value)
	}
	if value, ok := gauo.mutation.CookieToken(); ok {
		_spec.SetField(gameaccount.FieldCookieToken, field.TypeString, value)
	}
	if value, ok := gauo.mutation.Stoken(); ok {
		_spec.SetField(gameaccount.FieldStoken, field.TypeString, value)
	}
	if value, ok := gauo.mutation.Mid(); ok {
		_spec.SetField(gameaccount.FieldMid, field.TypeString, value)
	}
	if value, ok := gauo.mutation.UpdateAt(); ok {
		_spec.SetField(gameaccount.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(gauo.modifiers...)
	_node = &GameAccount{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}
