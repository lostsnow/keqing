// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/chatoption"
)

// ChatOptionCreate is the builder for creating a ChatOption entity.
type ChatOptionCreate struct {
	config
	mutation *ChatOptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetChatID sets the "chat_id" field.
func (coc *ChatOptionCreate) SetChatID(i int64) *ChatOptionCreate {
	coc.mutation.SetChatID(i)
	return coc
}

// SetKey sets the "key" field.
func (coc *ChatOptionCreate) SetKey(s string) *ChatOptionCreate {
	coc.mutation.SetKey(s)
	return coc
}

// SetValue sets the "value" field.
func (coc *ChatOptionCreate) SetValue(s string) *ChatOptionCreate {
	coc.mutation.SetValue(s)
	return coc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (coc *ChatOptionCreate) SetNillableValue(s *string) *ChatOptionCreate {
	if s != nil {
		coc.SetValue(*s)
	}
	return coc
}

// SetCreateAt sets the "create_at" field.
func (coc *ChatOptionCreate) SetCreateAt(t time.Time) *ChatOptionCreate {
	coc.mutation.SetCreateAt(t)
	return coc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (coc *ChatOptionCreate) SetNillableCreateAt(t *time.Time) *ChatOptionCreate {
	if t != nil {
		coc.SetCreateAt(*t)
	}
	return coc
}

// SetUpdateAt sets the "update_at" field.
func (coc *ChatOptionCreate) SetUpdateAt(t time.Time) *ChatOptionCreate {
	coc.mutation.SetUpdateAt(t)
	return coc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (coc *ChatOptionCreate) SetNillableUpdateAt(t *time.Time) *ChatOptionCreate {
	if t != nil {
		coc.SetUpdateAt(*t)
	}
	return coc
}

// SetID sets the "id" field.
func (coc *ChatOptionCreate) SetID(i int64) *ChatOptionCreate {
	coc.mutation.SetID(i)
	return coc
}

// Mutation returns the ChatOptionMutation object of the builder.
func (coc *ChatOptionCreate) Mutation() *ChatOptionMutation {
	return coc.mutation
}

// Save creates the ChatOption in the database.
func (coc *ChatOptionCreate) Save(ctx context.Context) (*ChatOption, error) {
	coc.defaults()
	return withHooks[*ChatOption, ChatOptionMutation](ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *ChatOptionCreate) SaveX(ctx context.Context) *ChatOption {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *ChatOptionCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *ChatOptionCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *ChatOptionCreate) defaults() {
	if _, ok := coc.mutation.Value(); !ok {
		v := chatoption.DefaultValue
		coc.mutation.SetValue(v)
	}
	if _, ok := coc.mutation.CreateAt(); !ok {
		v := chatoption.DefaultCreateAt()
		coc.mutation.SetCreateAt(v)
	}
	if _, ok := coc.mutation.UpdateAt(); !ok {
		v := chatoption.DefaultUpdateAt()
		coc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *ChatOptionCreate) check() error {
	if _, ok := coc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`entity: missing required field "ChatOption.chat_id"`)}
	}
	if _, ok := coc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`entity: missing required field "ChatOption.key"`)}
	}
	if v, ok := coc.mutation.Key(); ok {
		if err := chatoption.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`entity: validator failed for field "ChatOption.key": %w`, err)}
		}
	}
	if _, ok := coc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`entity: missing required field "ChatOption.value"`)}
	}
	if _, ok := coc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`entity: missing required field "ChatOption.create_at"`)}
	}
	if _, ok := coc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`entity: missing required field "ChatOption.update_at"`)}
	}
	return nil
}

func (coc *ChatOptionCreate) sqlSave(ctx context.Context) (*ChatOption, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *ChatOptionCreate) createSpec() (*ChatOption, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatOption{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(chatoption.Table, sqlgraph.NewFieldSpec(chatoption.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = coc.conflict
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := coc.mutation.ChatID(); ok {
		_spec.SetField(chatoption.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := coc.mutation.Key(); ok {
		_spec.SetField(chatoption.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := coc.mutation.Value(); ok {
		_spec.SetField(chatoption.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := coc.mutation.CreateAt(); ok {
		_spec.SetField(chatoption.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}
	if value, ok := coc.mutation.UpdateAt(); ok {
		_spec.SetField(chatoption.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatOption.Create().
//		SetChatID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatOptionUpsert) {
//			SetChatID(v+v).
//		}).
//		Exec(ctx)
func (coc *ChatOptionCreate) OnConflict(opts ...sql.ConflictOption) *ChatOptionUpsertOne {
	coc.conflict = opts
	return &ChatOptionUpsertOne{
		create: coc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (coc *ChatOptionCreate) OnConflictColumns(columns ...string) *ChatOptionUpsertOne {
	coc.conflict = append(coc.conflict, sql.ConflictColumns(columns...))
	return &ChatOptionUpsertOne{
		create: coc,
	}
}

type (
	// ChatOptionUpsertOne is the builder for "upsert"-ing
	//  one ChatOption node.
	ChatOptionUpsertOne struct {
		create *ChatOptionCreate
	}

	// ChatOptionUpsert is the "OnConflict" setter.
	ChatOptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetChatID sets the "chat_id" field.
func (u *ChatOptionUpsert) SetChatID(v int64) *ChatOptionUpsert {
	u.Set(chatoption.FieldChatID, v)
	return u
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatOptionUpsert) UpdateChatID() *ChatOptionUpsert {
	u.SetExcluded(chatoption.FieldChatID)
	return u
}

// AddChatID adds v to the "chat_id" field.
func (u *ChatOptionUpsert) AddChatID(v int64) *ChatOptionUpsert {
	u.Add(chatoption.FieldChatID, v)
	return u
}

// SetKey sets the "key" field.
func (u *ChatOptionUpsert) SetKey(v string) *ChatOptionUpsert {
	u.Set(chatoption.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ChatOptionUpsert) UpdateKey() *ChatOptionUpsert {
	u.SetExcluded(chatoption.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *ChatOptionUpsert) SetValue(v string) *ChatOptionUpsert {
	u.Set(chatoption.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChatOptionUpsert) UpdateValue() *ChatOptionUpsert {
	u.SetExcluded(chatoption.FieldValue)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *ChatOptionUpsert) SetUpdateAt(v time.Time) *ChatOptionUpsert {
	u.Set(chatoption.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ChatOptionUpsert) UpdateUpdateAt() *ChatOptionUpsert {
	u.SetExcluded(chatoption.FieldUpdateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chatoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChatOptionUpsertOne) UpdateNewValues() *ChatOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(chatoption.FieldID)
		}
		if _, exists := u.create.mutation.CreateAt(); exists {
			s.SetIgnore(chatoption.FieldCreateAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChatOptionUpsertOne) Ignore() *ChatOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatOptionUpsertOne) DoNothing() *ChatOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatOptionCreate.OnConflict
// documentation for more info.
func (u *ChatOptionUpsertOne) Update(set func(*ChatOptionUpsert)) *ChatOptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetChatID sets the "chat_id" field.
func (u *ChatOptionUpsertOne) SetChatID(v int64) *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetChatID(v)
	})
}

// AddChatID adds v to the "chat_id" field.
func (u *ChatOptionUpsertOne) AddChatID(v int64) *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.AddChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatOptionUpsertOne) UpdateChatID() *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateChatID()
	})
}

// SetKey sets the "key" field.
func (u *ChatOptionUpsertOne) SetKey(v string) *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ChatOptionUpsertOne) UpdateKey() *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ChatOptionUpsertOne) SetValue(v string) *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChatOptionUpsertOne) UpdateValue() *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateValue()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ChatOptionUpsertOne) SetUpdateAt(v time.Time) *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ChatOptionUpsertOne) UpdateUpdateAt() *ChatOptionUpsertOne {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *ChatOptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ChatOptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatOptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChatOptionUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChatOptionUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChatOptionCreateBulk is the builder for creating many ChatOption entities in bulk.
type ChatOptionCreateBulk struct {
	config
	builders []*ChatOptionCreate
	conflict []sql.ConflictOption
}

// Save creates the ChatOption entities in the database.
func (cocb *ChatOptionCreateBulk) Save(ctx context.Context) ([]*ChatOption, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*ChatOption, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *ChatOptionCreateBulk) SaveX(ctx context.Context) []*ChatOption {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *ChatOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *ChatOptionCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChatOption.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatOptionUpsert) {
//			SetChatID(v+v).
//		}).
//		Exec(ctx)
func (cocb *ChatOptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChatOptionUpsertBulk {
	cocb.conflict = opts
	return &ChatOptionUpsertBulk{
		create: cocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cocb *ChatOptionCreateBulk) OnConflictColumns(columns ...string) *ChatOptionUpsertBulk {
	cocb.conflict = append(cocb.conflict, sql.ConflictColumns(columns...))
	return &ChatOptionUpsertBulk{
		create: cocb,
	}
}

// ChatOptionUpsertBulk is the builder for "upsert"-ing
// a bulk of ChatOption nodes.
type ChatOptionUpsertBulk struct {
	create *ChatOptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(chatoption.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ChatOptionUpsertBulk) UpdateNewValues() *ChatOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(chatoption.FieldID)
			}
			if _, exists := b.mutation.CreateAt(); exists {
				s.SetIgnore(chatoption.FieldCreateAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChatOption.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChatOptionUpsertBulk) Ignore() *ChatOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatOptionUpsertBulk) DoNothing() *ChatOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatOptionCreateBulk.OnConflict
// documentation for more info.
func (u *ChatOptionUpsertBulk) Update(set func(*ChatOptionUpsert)) *ChatOptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatOptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetChatID sets the "chat_id" field.
func (u *ChatOptionUpsertBulk) SetChatID(v int64) *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetChatID(v)
	})
}

// AddChatID adds v to the "chat_id" field.
func (u *ChatOptionUpsertBulk) AddChatID(v int64) *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.AddChatID(v)
	})
}

// UpdateChatID sets the "chat_id" field to the value that was provided on create.
func (u *ChatOptionUpsertBulk) UpdateChatID() *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateChatID()
	})
}

// SetKey sets the "key" field.
func (u *ChatOptionUpsertBulk) SetKey(v string) *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *ChatOptionUpsertBulk) UpdateKey() *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *ChatOptionUpsertBulk) SetValue(v string) *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *ChatOptionUpsertBulk) UpdateValue() *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateValue()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ChatOptionUpsertBulk) SetUpdateAt(v time.Time) *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ChatOptionUpsertBulk) UpdateUpdateAt() *ChatOptionUpsertBulk {
	return u.Update(func(s *ChatOptionUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *ChatOptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entity: OnConflict was set for builder %d. Set it on the ChatOptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for ChatOptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatOptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
