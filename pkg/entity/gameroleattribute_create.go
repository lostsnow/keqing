// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gameroleattribute"
)

// GameRoleAttributeCreate is the builder for creating a GameRoleAttribute entity.
type GameRoleAttributeCreate struct {
	config
	mutation *GameRoleAttributeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (grac *GameRoleAttributeCreate) SetUserID(i int64) *GameRoleAttributeCreate {
	grac.mutation.SetUserID(i)
	return grac
}

// SetAccountID sets the "account_id" field.
func (grac *GameRoleAttributeCreate) SetAccountID(s string) *GameRoleAttributeCreate {
	grac.mutation.SetAccountID(s)
	return grac
}

// SetRoleID sets the "role_id" field.
func (grac *GameRoleAttributeCreate) SetRoleID(s string) *GameRoleAttributeCreate {
	grac.mutation.SetRoleID(s)
	return grac
}

// SetName sets the "name" field.
func (grac *GameRoleAttributeCreate) SetName(s string) *GameRoleAttributeCreate {
	grac.mutation.SetName(s)
	return grac
}

// SetType sets the "type" field.
func (grac *GameRoleAttributeCreate) SetType(i int) *GameRoleAttributeCreate {
	grac.mutation.SetType(i)
	return grac
}

// SetNillableType sets the "type" field if the given value is not nil.
func (grac *GameRoleAttributeCreate) SetNillableType(i *int) *GameRoleAttributeCreate {
	if i != nil {
		grac.SetType(*i)
	}

	return grac
}

// SetValue sets the "value" field.
func (grac *GameRoleAttributeCreate) SetValue(s string) *GameRoleAttributeCreate {
	grac.mutation.SetValue(s)
	return grac
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (grac *GameRoleAttributeCreate) SetNillableValue(s *string) *GameRoleAttributeCreate {
	if s != nil {
		grac.SetValue(*s)
	}

	return grac
}

// SetCreateAt sets the "create_at" field.
func (grac *GameRoleAttributeCreate) SetCreateAt(t time.Time) *GameRoleAttributeCreate {
	grac.mutation.SetCreateAt(t)
	return grac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (grac *GameRoleAttributeCreate) SetNillableCreateAt(t *time.Time) *GameRoleAttributeCreate {
	if t != nil {
		grac.SetCreateAt(*t)
	}

	return grac
}

// SetUpdateAt sets the "update_at" field.
func (grac *GameRoleAttributeCreate) SetUpdateAt(t time.Time) *GameRoleAttributeCreate {
	grac.mutation.SetUpdateAt(t)
	return grac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (grac *GameRoleAttributeCreate) SetNillableUpdateAt(t *time.Time) *GameRoleAttributeCreate {
	if t != nil {
		grac.SetUpdateAt(*t)
	}

	return grac
}

// SetID sets the "id" field.
func (grac *GameRoleAttributeCreate) SetID(i int64) *GameRoleAttributeCreate {
	grac.mutation.SetID(i)
	return grac
}

// Mutation returns the GameRoleAttributeMutation object of the builder.
func (grac *GameRoleAttributeCreate) Mutation() *GameRoleAttributeMutation {
	return grac.mutation
}

// Save creates the GameRoleAttribute in the database.
func (grac *GameRoleAttributeCreate) Save(ctx context.Context) (*GameRoleAttribute, error) {
	grac.defaults()
	return withHooks[*GameRoleAttribute, GameRoleAttributeMutation](ctx, grac.sqlSave, grac.mutation, grac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (grac *GameRoleAttributeCreate) SaveX(ctx context.Context) *GameRoleAttribute {
	v, err := grac.Save(ctx)
	if err != nil {
		panic(err)
	}

	return v
}

// Exec executes the query.
func (grac *GameRoleAttributeCreate) Exec(ctx context.Context) error {
	_, err := grac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (grac *GameRoleAttributeCreate) ExecX(ctx context.Context) {
	if err := grac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (grac *GameRoleAttributeCreate) defaults() {
	if _, ok := grac.mutation.GetType(); !ok {
		v := gameroleattribute.DefaultType
		grac.mutation.SetType(v)
	}

	if _, ok := grac.mutation.Value(); !ok {
		v := gameroleattribute.DefaultValue
		grac.mutation.SetValue(v)
	}

	if _, ok := grac.mutation.CreateAt(); !ok {
		v := gameroleattribute.DefaultCreateAt()
		grac.mutation.SetCreateAt(v)
	}

	if _, ok := grac.mutation.UpdateAt(); !ok {
		v := gameroleattribute.DefaultUpdateAt()
		grac.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (grac *GameRoleAttributeCreate) check() error {
	if _, ok := grac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`entity: missing required field "GameRoleAttribute.user_id"`)}
	}

	if _, ok := grac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`entity: missing required field "GameRoleAttribute.account_id"`)}
	}

	if v, ok := grac.mutation.AccountID(); ok {
		if err := gameroleattribute.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameRoleAttribute.account_id": %w`, err)}
		}
	}

	if _, ok := grac.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`entity: missing required field "GameRoleAttribute.role_id"`)}
	}

	if v, ok := grac.mutation.RoleID(); ok {
		if err := gameroleattribute.RoleIDValidator(v); err != nil {
			return &ValidationError{Name: "role_id", err: fmt.Errorf(`entity: validator failed for field "GameRoleAttribute.role_id": %w`, err)}
		}
	}

	if _, ok := grac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`entity: missing required field "GameRoleAttribute.name"`)}
	}

	if v, ok := grac.mutation.Name(); ok {
		if err := gameroleattribute.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`entity: validator failed for field "GameRoleAttribute.name": %w`, err)}
		}
	}

	if _, ok := grac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`entity: missing required field "GameRoleAttribute.type"`)}
	}

	if _, ok := grac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`entity: missing required field "GameRoleAttribute.value"`)}
	}

	if _, ok := grac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`entity: missing required field "GameRoleAttribute.create_at"`)}
	}

	if _, ok := grac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`entity: missing required field "GameRoleAttribute.update_at"`)}
	}

	return nil
}

func (grac *GameRoleAttributeCreate) sqlSave(ctx context.Context) (*GameRoleAttribute, error) {
	if err := grac.check(); err != nil {
		return nil, err
	}

	_node, _spec := grac.createSpec()
	if err := sqlgraph.CreateNode(ctx, grac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}

		return nil, err
	}

	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}

	grac.mutation.id = &_node.ID
	grac.mutation.done = true

	return _node, nil
}

func (grac *GameRoleAttributeCreate) createSpec() (*GameRoleAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &GameRoleAttribute{config: grac.config}
		_spec = sqlgraph.NewCreateSpec(gameroleattribute.Table, sqlgraph.NewFieldSpec(gameroleattribute.FieldID, field.TypeInt64))
	)

	_spec.OnConflict = grac.conflict

	if id, ok := grac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}

	if value, ok := grac.mutation.UserID(); ok {
		_spec.SetField(gameroleattribute.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}

	if value, ok := grac.mutation.AccountID(); ok {
		_spec.SetField(gameroleattribute.FieldAccountID, field.TypeString, value)
		_node.AccountID = value
	}

	if value, ok := grac.mutation.RoleID(); ok {
		_spec.SetField(gameroleattribute.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}

	if value, ok := grac.mutation.Name(); ok {
		_spec.SetField(gameroleattribute.FieldName, field.TypeString, value)
		_node.Name = value
	}

	if value, ok := grac.mutation.GetType(); ok {
		_spec.SetField(gameroleattribute.FieldType, field.TypeInt, value)
		_node.Type = value
	}

	if value, ok := grac.mutation.Value(); ok {
		_spec.SetField(gameroleattribute.FieldValue, field.TypeString, value)
		_node.Value = value
	}

	if value, ok := grac.mutation.CreateAt(); ok {
		_spec.SetField(gameroleattribute.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}

	if value, ok := grac.mutation.UpdateAt(); ok {
		_spec.SetField(gameroleattribute.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}

	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameRoleAttribute.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameRoleAttributeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (grac *GameRoleAttributeCreate) OnConflict(opts ...sql.ConflictOption) *GameRoleAttributeUpsertOne {
	grac.conflict = opts

	return &GameRoleAttributeUpsertOne{
		create: grac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (grac *GameRoleAttributeCreate) OnConflictColumns(columns ...string) *GameRoleAttributeUpsertOne {
	grac.conflict = append(grac.conflict, sql.ConflictColumns(columns...))

	return &GameRoleAttributeUpsertOne{
		create: grac,
	}
}

type (
	// GameRoleAttributeUpsertOne is the builder for "upsert"-ing
	//  one GameRoleAttribute node.
	GameRoleAttributeUpsertOne struct {
		create *GameRoleAttributeCreate
	}

	// GameRoleAttributeUpsert is the "OnConflict" setter.
	GameRoleAttributeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *GameRoleAttributeUpsert) SetUserID(v int64) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateUserID() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *GameRoleAttributeUpsert) AddUserID(v int64) *GameRoleAttributeUpsert {
	u.Add(gameroleattribute.FieldUserID, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *GameRoleAttributeUpsert) SetAccountID(v string) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateAccountID() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldAccountID)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *GameRoleAttributeUpsert) SetRoleID(v string) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateRoleID() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldRoleID)
	return u
}

// SetName sets the "name" field.
func (u *GameRoleAttributeUpsert) SetName(v string) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateName() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *GameRoleAttributeUpsert) SetType(v int) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateType() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *GameRoleAttributeUpsert) AddType(v int) *GameRoleAttributeUpsert {
	u.Add(gameroleattribute.FieldType, v)
	return u
}

// SetValue sets the "value" field.
func (u *GameRoleAttributeUpsert) SetValue(v string) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateValue() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldValue)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GameRoleAttributeUpsert) SetUpdateAt(v time.Time) *GameRoleAttributeUpsert {
	u.Set(gameroleattribute.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameRoleAttributeUpsert) UpdateUpdateAt() *GameRoleAttributeUpsert {
	u.SetExcluded(gameroleattribute.FieldUpdateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameroleattribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameRoleAttributeUpsertOne) UpdateNewValues() *GameRoleAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gameroleattribute.FieldID)
		}

		if _, exists := u.create.mutation.CreateAt(); exists {
			s.SetIgnore(gameroleattribute.FieldCreateAt)
		}
	}))

	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GameRoleAttributeUpsertOne) Ignore() *GameRoleAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameRoleAttributeUpsertOne) DoNothing() *GameRoleAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameRoleAttributeCreate.OnConflict
// documentation for more info.
func (u *GameRoleAttributeUpsertOne) Update(set func(*GameRoleAttributeUpsert)) *GameRoleAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameRoleAttributeUpsert{UpdateSet: update})
	}))

	return u
}

// SetUserID sets the "user_id" field.
func (u *GameRoleAttributeUpsertOne) SetUserID(v int64) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *GameRoleAttributeUpsertOne) AddUserID(v int64) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateUserID() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GameRoleAttributeUpsertOne) SetAccountID(v string) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateAccountID() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateAccountID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *GameRoleAttributeUpsertOne) SetRoleID(v string) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateRoleID() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateRoleID()
	})
}

// SetName sets the "name" field.
func (u *GameRoleAttributeUpsertOne) SetName(v string) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateName() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *GameRoleAttributeUpsertOne) SetType(v int) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *GameRoleAttributeUpsertOne) AddType(v int) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateType() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *GameRoleAttributeUpsertOne) SetValue(v string) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateValue() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateValue()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GameRoleAttributeUpsertOne) SetUpdateAt(v time.Time) *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertOne) UpdateUpdateAt() *GameRoleAttributeUpsertOne {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *GameRoleAttributeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for GameRoleAttributeCreate.OnConflict")
	}

	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameRoleAttributeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameRoleAttributeUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}

	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameRoleAttributeUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}

	return id
}

// GameRoleAttributeCreateBulk is the builder for creating many GameRoleAttribute entities in bulk.
type GameRoleAttributeCreateBulk struct {
	config
	builders []*GameRoleAttributeCreate
	conflict []sql.ConflictOption
}

// Save creates the GameRoleAttribute entities in the database.
func (gracb *GameRoleAttributeCreateBulk) Save(ctx context.Context) ([]*GameRoleAttribute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gracb.builders))
	nodes := make([]*GameRoleAttribute, len(gracb.builders))
	mutators := make([]Mutator, len(gracb.builders))

	for i := range gracb.builders {
		func(i int, root context.Context) {
			builder := gracb.builders[i]
			builder.defaults()

			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameRoleAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gracb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gracb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gracb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})

			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}

			mutators[i] = mut
		}(i, ctx)
	}

	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gracb.builders[0].mutation); err != nil {
			return nil, err
		}
	}

	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gracb *GameRoleAttributeCreateBulk) SaveX(ctx context.Context) []*GameRoleAttribute {
	v, err := gracb.Save(ctx)
	if err != nil {
		panic(err)
	}

	return v
}

// Exec executes the query.
func (gracb *GameRoleAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := gracb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gracb *GameRoleAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := gracb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameRoleAttribute.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameRoleAttributeUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (gracb *GameRoleAttributeCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameRoleAttributeUpsertBulk {
	gracb.conflict = opts

	return &GameRoleAttributeUpsertBulk{
		create: gracb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gracb *GameRoleAttributeCreateBulk) OnConflictColumns(columns ...string) *GameRoleAttributeUpsertBulk {
	gracb.conflict = append(gracb.conflict, sql.ConflictColumns(columns...))

	return &GameRoleAttributeUpsertBulk{
		create: gracb,
	}
}

// GameRoleAttributeUpsertBulk is the builder for "upsert"-ing
// a bulk of GameRoleAttribute nodes.
type GameRoleAttributeUpsertBulk struct {
	create *GameRoleAttributeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameroleattribute.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameRoleAttributeUpsertBulk) UpdateNewValues() *GameRoleAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gameroleattribute.FieldID)
			}

			if _, exists := b.mutation.CreateAt(); exists {
				s.SetIgnore(gameroleattribute.FieldCreateAt)
			}
		}
	}))

	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameRoleAttribute.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GameRoleAttributeUpsertBulk) Ignore() *GameRoleAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameRoleAttributeUpsertBulk) DoNothing() *GameRoleAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameRoleAttributeCreateBulk.OnConflict
// documentation for more info.
func (u *GameRoleAttributeUpsertBulk) Update(set func(*GameRoleAttributeUpsert)) *GameRoleAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameRoleAttributeUpsert{UpdateSet: update})
	}))

	return u
}

// SetUserID sets the "user_id" field.
func (u *GameRoleAttributeUpsertBulk) SetUserID(v int64) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *GameRoleAttributeUpsertBulk) AddUserID(v int64) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateUserID() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GameRoleAttributeUpsertBulk) SetAccountID(v string) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateAccountID() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateAccountID()
	})
}

// SetRoleID sets the "role_id" field.
func (u *GameRoleAttributeUpsertBulk) SetRoleID(v string) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateRoleID() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateRoleID()
	})
}

// SetName sets the "name" field.
func (u *GameRoleAttributeUpsertBulk) SetName(v string) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateName() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *GameRoleAttributeUpsertBulk) SetType(v int) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *GameRoleAttributeUpsertBulk) AddType(v int) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateType() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateType()
	})
}

// SetValue sets the "value" field.
func (u *GameRoleAttributeUpsertBulk) SetValue(v string) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateValue() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateValue()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GameRoleAttributeUpsertBulk) SetUpdateAt(v time.Time) *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameRoleAttributeUpsertBulk) UpdateUpdateAt() *GameRoleAttributeUpsertBulk {
	return u.Update(func(s *GameRoleAttributeUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *GameRoleAttributeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entity: OnConflict was set for builder %d. Set it on the GameRoleAttributeCreateBulk instead", i)
		}
	}

	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for GameRoleAttributeCreateBulk.OnConflict")
	}

	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameRoleAttributeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
