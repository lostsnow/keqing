// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/chatoption"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// ChatOptionDelete is the builder for deleting a ChatOption entity.
type ChatOptionDelete struct {
	config
	hooks    []Hook
	mutation *ChatOptionMutation
}

// Where appends a list predicates to the ChatOptionDelete builder.
func (cod *ChatOptionDelete) Where(ps ...predicate.ChatOption) *ChatOptionDelete {
	cod.mutation.Where(ps...)
	return cod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cod *ChatOptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ChatOptionMutation](ctx, cod.sqlExec, cod.mutation, cod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cod *ChatOptionDelete) ExecX(ctx context.Context) int {
	n, err := cod.Exec(ctx)
	if err != nil {
		panic(err)
	}

	return n
}

func (cod *ChatOptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chatoption.Table, sqlgraph.NewFieldSpec(chatoption.FieldID, field.TypeInt64))
	if ps := cod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	affected, err := sqlgraph.DeleteNodes(ctx, cod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}

	cod.mutation.done = true

	return affected, err
}

// ChatOptionDeleteOne is the builder for deleting a single ChatOption entity.
type ChatOptionDeleteOne struct {
	cod *ChatOptionDelete
}

// Where appends a list predicates to the ChatOptionDelete builder.
func (codo *ChatOptionDeleteOne) Where(ps ...predicate.ChatOption) *ChatOptionDeleteOne {
	codo.cod.mutation.Where(ps...)
	return codo
}

// Exec executes the deletion query.
func (codo *ChatOptionDeleteOne) Exec(ctx context.Context) error {
	n, err := codo.cod.Exec(ctx)

	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chatoption.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (codo *ChatOptionDeleteOne) ExecX(ctx context.Context) {
	if err := codo.Exec(ctx); err != nil {
		panic(err)
	}
}
