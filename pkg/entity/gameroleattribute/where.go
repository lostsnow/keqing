// Code generated by ent, DO NOT EDIT.

package gameroleattribute

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldUserID, v))
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldAccountID, v))
}

// RoleID applies equality check predicate on the "role_id" field. It's identical to RoleIDEQ.
func RoleID(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldRoleID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldType, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldValue, v))
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldCreateAt, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldUpdateAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldUserID, v))
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldAccountID, v))
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldAccountID, v))
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldAccountID, vs...))
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldAccountID, vs...))
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldAccountID, v))
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldAccountID, v))
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldAccountID, v))
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldAccountID, v))
}

// AccountIDContains applies the Contains predicate on the "account_id" field.
func AccountIDContains(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContains(FieldAccountID, v))
}

// AccountIDHasPrefix applies the HasPrefix predicate on the "account_id" field.
func AccountIDHasPrefix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasPrefix(FieldAccountID, v))
}

// AccountIDHasSuffix applies the HasSuffix predicate on the "account_id" field.
func AccountIDHasSuffix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasSuffix(FieldAccountID, v))
}

// AccountIDEqualFold applies the EqualFold predicate on the "account_id" field.
func AccountIDEqualFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEqualFold(FieldAccountID, v))
}

// AccountIDContainsFold applies the ContainsFold predicate on the "account_id" field.
func AccountIDContainsFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContainsFold(FieldAccountID, v))
}

// RoleIDEQ applies the EQ predicate on the "role_id" field.
func RoleIDEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldRoleID, v))
}

// RoleIDNEQ applies the NEQ predicate on the "role_id" field.
func RoleIDNEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldRoleID, v))
}

// RoleIDIn applies the In predicate on the "role_id" field.
func RoleIDIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldRoleID, vs...))
}

// RoleIDNotIn applies the NotIn predicate on the "role_id" field.
func RoleIDNotIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldRoleID, vs...))
}

// RoleIDGT applies the GT predicate on the "role_id" field.
func RoleIDGT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldRoleID, v))
}

// RoleIDGTE applies the GTE predicate on the "role_id" field.
func RoleIDGTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldRoleID, v))
}

// RoleIDLT applies the LT predicate on the "role_id" field.
func RoleIDLT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldRoleID, v))
}

// RoleIDLTE applies the LTE predicate on the "role_id" field.
func RoleIDLTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldRoleID, v))
}

// RoleIDContains applies the Contains predicate on the "role_id" field.
func RoleIDContains(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContains(FieldRoleID, v))
}

// RoleIDHasPrefix applies the HasPrefix predicate on the "role_id" field.
func RoleIDHasPrefix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasPrefix(FieldRoleID, v))
}

// RoleIDHasSuffix applies the HasSuffix predicate on the "role_id" field.
func RoleIDHasSuffix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasSuffix(FieldRoleID, v))
}

// RoleIDEqualFold applies the EqualFold predicate on the "role_id" field.
func RoleIDEqualFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEqualFold(FieldRoleID, v))
}

// RoleIDContainsFold applies the ContainsFold predicate on the "role_id" field.
func RoleIDContainsFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContainsFold(FieldRoleID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldType, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldContainsFold(FieldValue, v))
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldCreateAt, v))
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldCreateAt, v))
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldCreateAt, vs...))
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldCreateAt, vs...))
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldCreateAt, v))
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldCreateAt, v))
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldCreateAt, v))
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldCreateAt, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(sql.FieldLTE(FieldUpdateAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GameRoleAttribute) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GameRoleAttribute) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GameRoleAttribute) predicate.GameRoleAttribute {
	return predicate.GameRoleAttribute(func(s *sql.Selector) {
		p(s.Not())
	})
}
