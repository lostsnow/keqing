// Code generated by ent, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lostsnow/keqing/pkg/entity/gameroleattribute"
)

// GameRoleAttribute is the model entity for the GameRoleAttribute schema.
type GameRoleAttribute struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID string `json:"account_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID string `json:"role_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameRoleAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))

	for i := range columns {
		switch columns[i] {
		case gameroleattribute.FieldID, gameroleattribute.FieldUserID, gameroleattribute.FieldType:
			values[i] = new(sql.NullInt64)
		case gameroleattribute.FieldAccountID, gameroleattribute.FieldRoleID, gameroleattribute.FieldName, gameroleattribute.FieldValue:
			values[i] = new(sql.NullString)
		case gameroleattribute.FieldCreateAt, gameroleattribute.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameRoleAttribute", columns[i])
		}
	}

	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameRoleAttribute fields.
func (gra *GameRoleAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}

	for i := range columns {
		switch columns[i] {
		case gameroleattribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}

			gra.ID = int64(value.Int64)
		case gameroleattribute.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				gra.UserID = value.Int64
			}
		case gameroleattribute.FieldAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				gra.AccountID = value.String
			}
		case gameroleattribute.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				gra.RoleID = value.String
			}
		case gameroleattribute.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gra.Name = value.String
			}
		case gameroleattribute.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gra.Type = int(value.Int64)
			}
		case gameroleattribute.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				gra.Value = value.String
			}
		case gameroleattribute.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gra.CreateAt = value.Time
			}
		case gameroleattribute.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gra.UpdateAt = value.Time
			}
		}
	}

	return nil
}

// Update returns a builder for updating this GameRoleAttribute.
// Note that you need to call GameRoleAttribute.Unwrap() before calling this method if this GameRoleAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (gra *GameRoleAttribute) Update() *GameRoleAttributeUpdateOne {
	return NewGameRoleAttributeClient(gra.config).UpdateOne(gra)
}

// Unwrap unwraps the GameRoleAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gra *GameRoleAttribute) Unwrap() *GameRoleAttribute {
	_tx, ok := gra.config.driver.(*txDriver)
	if !ok {
		panic("entity: GameRoleAttribute is not a transactional entity")
	}

	gra.config.driver = _tx.drv

	return gra
}

// String implements the fmt.Stringer.
func (gra *GameRoleAttribute) String() string {
	var builder strings.Builder

	builder.WriteString("GameRoleAttribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gra.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gra.UserID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(gra.AccountID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(gra.RoleID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gra.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", gra.Type))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(gra.Value)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(gra.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(gra.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')

	return builder.String()
}

// GameRoleAttributes is a parsable slice of GameRoleAttribute.
type GameRoleAttributes []*GameRoleAttribute
