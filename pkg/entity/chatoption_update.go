// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/chatoption"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// ChatOptionUpdate is the builder for updating ChatOption entities.
type ChatOptionUpdate struct {
	config
	hooks     []Hook
	mutation  *ChatOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ChatOptionUpdate builder.
func (cou *ChatOptionUpdate) Where(ps ...predicate.ChatOption) *ChatOptionUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetChatID sets the "chat_id" field.
func (cou *ChatOptionUpdate) SetChatID(i int64) *ChatOptionUpdate {
	cou.mutation.ResetChatID()
	cou.mutation.SetChatID(i)
	return cou
}

// AddChatID adds i to the "chat_id" field.
func (cou *ChatOptionUpdate) AddChatID(i int64) *ChatOptionUpdate {
	cou.mutation.AddChatID(i)
	return cou
}

// SetKey sets the "key" field.
func (cou *ChatOptionUpdate) SetKey(s string) *ChatOptionUpdate {
	cou.mutation.SetKey(s)
	return cou
}

// SetValue sets the "value" field.
func (cou *ChatOptionUpdate) SetValue(s string) *ChatOptionUpdate {
	cou.mutation.SetValue(s)
	return cou
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (cou *ChatOptionUpdate) SetNillableValue(s *string) *ChatOptionUpdate {
	if s != nil {
		cou.SetValue(*s)
	}
	return cou
}

// SetUpdateAt sets the "update_at" field.
func (cou *ChatOptionUpdate) SetUpdateAt(t time.Time) *ChatOptionUpdate {
	cou.mutation.SetUpdateAt(t)
	return cou
}

// Mutation returns the ChatOptionMutation object of the builder.
func (cou *ChatOptionUpdate) Mutation() *ChatOptionMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *ChatOptionUpdate) Save(ctx context.Context) (int, error) {
	cou.defaults()
	return withHooks[int, ChatOptionMutation](ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *ChatOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *ChatOptionUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *ChatOptionUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cou *ChatOptionUpdate) defaults() {
	if _, ok := cou.mutation.UpdateAt(); !ok {
		v := chatoption.UpdateDefaultUpdateAt()
		cou.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cou *ChatOptionUpdate) check() error {
	if v, ok := cou.mutation.Key(); ok {
		if err := chatoption.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`entity: validator failed for field "ChatOption.key": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cou *ChatOptionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChatOptionUpdate {
	cou.modifiers = append(cou.modifiers, modifiers...)
	return cou
}

func (cou *ChatOptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatoption.Table, chatoption.Columns, sqlgraph.NewFieldSpec(chatoption.FieldID, field.TypeInt64))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.ChatID(); ok {
		_spec.SetField(chatoption.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.AddedChatID(); ok {
		_spec.AddField(chatoption.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cou.mutation.Key(); ok {
		_spec.SetField(chatoption.FieldKey, field.TypeString, value)
	}
	if value, ok := cou.mutation.Value(); ok {
		_spec.SetField(chatoption.FieldValue, field.TypeString, value)
	}
	if value, ok := cou.mutation.UpdateAt(); ok {
		_spec.SetField(chatoption.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(cou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// ChatOptionUpdateOne is the builder for updating a single ChatOption entity.
type ChatOptionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ChatOptionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetChatID sets the "chat_id" field.
func (couo *ChatOptionUpdateOne) SetChatID(i int64) *ChatOptionUpdateOne {
	couo.mutation.ResetChatID()
	couo.mutation.SetChatID(i)
	return couo
}

// AddChatID adds i to the "chat_id" field.
func (couo *ChatOptionUpdateOne) AddChatID(i int64) *ChatOptionUpdateOne {
	couo.mutation.AddChatID(i)
	return couo
}

// SetKey sets the "key" field.
func (couo *ChatOptionUpdateOne) SetKey(s string) *ChatOptionUpdateOne {
	couo.mutation.SetKey(s)
	return couo
}

// SetValue sets the "value" field.
func (couo *ChatOptionUpdateOne) SetValue(s string) *ChatOptionUpdateOne {
	couo.mutation.SetValue(s)
	return couo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (couo *ChatOptionUpdateOne) SetNillableValue(s *string) *ChatOptionUpdateOne {
	if s != nil {
		couo.SetValue(*s)
	}
	return couo
}

// SetUpdateAt sets the "update_at" field.
func (couo *ChatOptionUpdateOne) SetUpdateAt(t time.Time) *ChatOptionUpdateOne {
	couo.mutation.SetUpdateAt(t)
	return couo
}

// Mutation returns the ChatOptionMutation object of the builder.
func (couo *ChatOptionUpdateOne) Mutation() *ChatOptionMutation {
	return couo.mutation
}

// Where appends a list predicates to the ChatOptionUpdate builder.
func (couo *ChatOptionUpdateOne) Where(ps ...predicate.ChatOption) *ChatOptionUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *ChatOptionUpdateOne) Select(field string, fields ...string) *ChatOptionUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated ChatOption entity.
func (couo *ChatOptionUpdateOne) Save(ctx context.Context) (*ChatOption, error) {
	couo.defaults()
	return withHooks[*ChatOption, ChatOptionMutation](ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *ChatOptionUpdateOne) SaveX(ctx context.Context) *ChatOption {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *ChatOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *ChatOptionUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (couo *ChatOptionUpdateOne) defaults() {
	if _, ok := couo.mutation.UpdateAt(); !ok {
		v := chatoption.UpdateDefaultUpdateAt()
		couo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (couo *ChatOptionUpdateOne) check() error {
	if v, ok := couo.mutation.Key(); ok {
		if err := chatoption.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`entity: validator failed for field "ChatOption.key": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (couo *ChatOptionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ChatOptionUpdateOne {
	couo.modifiers = append(couo.modifiers, modifiers...)
	return couo
}

func (couo *ChatOptionUpdateOne) sqlSave(ctx context.Context) (_node *ChatOption, err error) {
	if err := couo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatoption.Table, chatoption.Columns, sqlgraph.NewFieldSpec(chatoption.FieldID, field.TypeInt64))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "ChatOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatoption.FieldID)
		for _, f := range fields {
			if !chatoption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != chatoption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.ChatID(); ok {
		_spec.SetField(chatoption.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.AddedChatID(); ok {
		_spec.AddField(chatoption.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := couo.mutation.Key(); ok {
		_spec.SetField(chatoption.FieldKey, field.TypeString, value)
	}
	if value, ok := couo.mutation.Value(); ok {
		_spec.SetField(chatoption.FieldValue, field.TypeString, value)
	}
	if value, ok := couo.mutation.UpdateAt(); ok {
		_spec.SetField(chatoption.FieldUpdateAt, field.TypeTime, value)
	}
	_spec.AddModifiers(couo.modifiers...)
	_node = &ChatOption{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatoption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
