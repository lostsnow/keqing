// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/lostsnow/keqing/pkg/entity/chat"
	"github.com/lostsnow/keqing/pkg/entity/chatoption"
	"github.com/lostsnow/keqing/pkg/entity/gameaccount"
	"github.com/lostsnow/keqing/pkg/entity/gamerole"
	"github.com/lostsnow/keqing/pkg/entity/gameroleattribute"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
	"github.com/lostsnow/keqing/pkg/entity/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChat              = "Chat"
	TypeChatOption        = "ChatOption"
	TypeGameAccount       = "GameAccount"
	TypeGameRole          = "GameRole"
	TypeGameRoleAttribute = "GameRoleAttribute"
	TypeUser              = "User"
)

// ChatMutation represents an operation that mutates the Chat nodes in the graph.
type ChatMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	chat_id       *int64
	addchat_id    *int64
	_type         *string
	is_forum      *bool
	title         *string
	user_name     *string
	first_name    *string
	last_name     *string
	description   *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Chat, error)
	predicates    []predicate.Chat
}

var _ ent.Mutation = (*ChatMutation)(nil)

// chatOption allows management of the mutation configuration using functional options.
type chatOption func(*ChatMutation)

// newChatMutation creates new mutation for the Chat entity.
func newChatMutation(c config, op Op, opts ...chatOption) *ChatMutation {
	m := &ChatMutation{
		config:        c,
		op:            op,
		typ:           TypeChat,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withChatID sets the ID field of the mutation.
func withChatID(id int64) chatOption {
	return func(m *ChatMutation) {
		var (
			err   error
			once  sync.Once
			value *Chat
		)

		m.oldValue = func(ctx context.Context) (*Chat, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chat.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withChat sets the old Chat of the mutation.
func withChat(node *Chat) chatOption {
	return func(m *ChatMutation) {
		m.oldValue = func(context.Context) (*Chat, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Chat entities.
func (m *ChatMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chat.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}

	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}

	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *ChatMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *ChatMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetType sets the "type" field.
func (m *ChatMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *ChatMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}

	return *v, true
}

// OldType returns the old "type" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}

	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ChatMutation) ResetType() {
	m._type = nil
}

// SetIsForum sets the "is_forum" field.
func (m *ChatMutation) SetIsForum(b bool) {
	m.is_forum = &b
}

// IsForum returns the value of the "is_forum" field in the mutation.
func (m *ChatMutation) IsForum() (r bool, exists bool) {
	v := m.is_forum
	if v == nil {
		return
	}

	return *v, true
}

// OldIsForum returns the old "is_forum" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldIsForum(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsForum is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsForum requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsForum: %w", err)
	}

	return oldValue.IsForum, nil
}

// ResetIsForum resets all changes to the "is_forum" field.
func (m *ChatMutation) ResetIsForum() {
	m.is_forum = nil
}

// SetTitle sets the "title" field.
func (m *ChatMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ChatMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}

	return *v, true
}

// OldTitle returns the old "title" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}

	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ChatMutation) ResetTitle() {
	m.title = nil
}

// SetUserName sets the "user_name" field.
func (m *ChatMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *ChatMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}

	return *v, true
}

// OldUserName returns the old "user_name" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}

	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *ChatMutation) ResetUserName() {
	m.user_name = nil
}

// SetFirstName sets the "first_name" field.
func (m *ChatMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *ChatMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}

	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}

	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *ChatMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *ChatMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *ChatMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}

	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}

	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *ChatMutation) ResetLastName() {
	m.last_name = nil
}

// SetDescription sets the "description" field.
func (m *ChatMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ChatMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}

	return *v, true
}

// OldDescription returns the old "description" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}

	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ChatMutation) ResetDescription() {
	m.description = nil
}

// SetCreateAt sets the "create_at" field.
func (m *ChatMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *ChatMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *ChatMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *ChatMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *ChatMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the Chat entity.
// If the Chat object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *ChatMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the ChatMutation builder.
func (m *ChatMutation) Where(ps ...predicate.Chat) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chat, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chat).
func (m *ChatMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.chat_id != nil {
		fields = append(fields, chat.FieldChatID)
	}

	if m._type != nil {
		fields = append(fields, chat.FieldType)
	}

	if m.is_forum != nil {
		fields = append(fields, chat.FieldIsForum)
	}

	if m.title != nil {
		fields = append(fields, chat.FieldTitle)
	}

	if m.user_name != nil {
		fields = append(fields, chat.FieldUserName)
	}

	if m.first_name != nil {
		fields = append(fields, chat.FieldFirstName)
	}

	if m.last_name != nil {
		fields = append(fields, chat.FieldLastName)
	}

	if m.description != nil {
		fields = append(fields, chat.FieldDescription)
	}

	if m.create_at != nil {
		fields = append(fields, chat.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, chat.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldChatID:
		return m.ChatID()
	case chat.FieldType:
		return m.GetType()
	case chat.FieldIsForum:
		return m.IsForum()
	case chat.FieldTitle:
		return m.Title()
	case chat.FieldUserName:
		return m.UserName()
	case chat.FieldFirstName:
		return m.FirstName()
	case chat.FieldLastName:
		return m.LastName()
	case chat.FieldDescription:
		return m.Description()
	case chat.FieldCreateAt:
		return m.CreateAt()
	case chat.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chat.FieldChatID:
		return m.OldChatID(ctx)
	case chat.FieldType:
		return m.OldType(ctx)
	case chat.FieldIsForum:
		return m.OldIsForum(ctx)
	case chat.FieldTitle:
		return m.OldTitle(ctx)
	case chat.FieldUserName:
		return m.OldUserName(ctx)
	case chat.FieldFirstName:
		return m.OldFirstName(ctx)
	case chat.FieldLastName:
		return m.OldLastName(ctx)
	case chat.FieldDescription:
		return m.OldDescription(ctx)
	case chat.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case chat.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown Chat field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetChatID(v)

		return nil
	case chat.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetType(v)

		return nil
	case chat.FieldIsForum:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetIsForum(v)

		return nil
	case chat.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetTitle(v)

		return nil
	case chat.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserName(v)

		return nil
	case chat.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetFirstName(v)

		return nil
	case chat.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetLastName(v)

		return nil
	case chat.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetDescription(v)

		return nil
	case chat.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case chat.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, chat.FieldChatID)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chat.FieldChatID:
		return m.AddedChatID()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chat.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddChatID(v)

		return nil
	}

	return fmt.Errorf("unknown Chat numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Chat nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatMutation) ResetField(name string) error {
	switch name {
	case chat.FieldChatID:
		m.ResetChatID()
		return nil
	case chat.FieldType:
		m.ResetType()
		return nil
	case chat.FieldIsForum:
		m.ResetIsForum()
		return nil
	case chat.FieldTitle:
		m.ResetTitle()
		return nil
	case chat.FieldUserName:
		m.ResetUserName()
		return nil
	case chat.FieldFirstName:
		m.ResetFirstName()
		return nil
	case chat.FieldLastName:
		m.ResetLastName()
		return nil
	case chat.FieldDescription:
		m.ResetDescription()
		return nil
	case chat.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case chat.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown Chat field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Chat unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Chat edge %s", name)
}

// ChatOptionMutation represents an operation that mutates the ChatOption nodes in the graph.
type ChatOptionMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	chat_id       *int64
	addchat_id    *int64
	key           *string
	value         *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ChatOption, error)
	predicates    []predicate.ChatOption
}

var _ ent.Mutation = (*ChatOptionMutation)(nil)

// chatoptionOption allows management of the mutation configuration using functional options.
type chatoptionOption func(*ChatOptionMutation)

// newChatOptionMutation creates new mutation for the ChatOption entity.
func newChatOptionMutation(c config, op Op, opts ...chatoptionOption) *ChatOptionMutation {
	m := &ChatOptionMutation{
		config:        c,
		op:            op,
		typ:           TypeChatOption,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withChatOptionID sets the ID field of the mutation.
func withChatOptionID(id int64) chatoptionOption {
	return func(m *ChatOptionMutation) {
		var (
			err   error
			once  sync.Once
			value *ChatOption
		)

		m.oldValue = func(ctx context.Context) (*ChatOption, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ChatOption.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withChatOption sets the old ChatOption of the mutation.
func withChatOption(node *ChatOption) chatoptionOption {
	return func(m *ChatOptionMutation) {
		m.oldValue = func(context.Context) (*ChatOption, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChatOptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChatOptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ChatOption entities.
func (m *ChatOptionMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChatOptionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChatOptionMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ChatOption.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChatID sets the "chat_id" field.
func (m *ChatOptionMutation) SetChatID(i int64) {
	m.chat_id = &i
	m.addchat_id = nil
}

// ChatID returns the value of the "chat_id" field in the mutation.
func (m *ChatOptionMutation) ChatID() (r int64, exists bool) {
	v := m.chat_id
	if v == nil {
		return
	}

	return *v, true
}

// OldChatID returns the old "chat_id" field's value of the ChatOption entity.
// If the ChatOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatOptionMutation) OldChatID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatID: %w", err)
	}

	return oldValue.ChatID, nil
}

// AddChatID adds i to the "chat_id" field.
func (m *ChatOptionMutation) AddChatID(i int64) {
	if m.addchat_id != nil {
		*m.addchat_id += i
	} else {
		m.addchat_id = &i
	}
}

// AddedChatID returns the value that was added to the "chat_id" field in this mutation.
func (m *ChatOptionMutation) AddedChatID() (r int64, exists bool) {
	v := m.addchat_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetChatID resets all changes to the "chat_id" field.
func (m *ChatOptionMutation) ResetChatID() {
	m.chat_id = nil
	m.addchat_id = nil
}

// SetKey sets the "key" field.
func (m *ChatOptionMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *ChatOptionMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}

	return *v, true
}

// OldKey returns the old "key" field's value of the ChatOption entity.
// If the ChatOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatOptionMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKey is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKey requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}

	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *ChatOptionMutation) ResetKey() {
	m.key = nil
}

// SetValue sets the "value" field.
func (m *ChatOptionMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *ChatOptionMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}

	return *v, true
}

// OldValue returns the old "value" field's value of the ChatOption entity.
// If the ChatOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatOptionMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}

	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *ChatOptionMutation) ResetValue() {
	m.value = nil
}

// SetCreateAt sets the "create_at" field.
func (m *ChatOptionMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *ChatOptionMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the ChatOption entity.
// If the ChatOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatOptionMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *ChatOptionMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *ChatOptionMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *ChatOptionMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the ChatOption entity.
// If the ChatOption object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChatOptionMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *ChatOptionMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the ChatOptionMutation builder.
func (m *ChatOptionMutation) Where(ps ...predicate.ChatOption) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChatOptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChatOptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ChatOption, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *ChatOptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChatOptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ChatOption).
func (m *ChatOptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChatOptionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.chat_id != nil {
		fields = append(fields, chatoption.FieldChatID)
	}

	if m.key != nil {
		fields = append(fields, chatoption.FieldKey)
	}

	if m.value != nil {
		fields = append(fields, chatoption.FieldValue)
	}

	if m.create_at != nil {
		fields = append(fields, chatoption.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, chatoption.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChatOptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatoption.FieldChatID:
		return m.ChatID()
	case chatoption.FieldKey:
		return m.Key()
	case chatoption.FieldValue:
		return m.Value()
	case chatoption.FieldCreateAt:
		return m.CreateAt()
	case chatoption.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChatOptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatoption.FieldChatID:
		return m.OldChatID(ctx)
	case chatoption.FieldKey:
		return m.OldKey(ctx)
	case chatoption.FieldValue:
		return m.OldValue(ctx)
	case chatoption.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case chatoption.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown ChatOption field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatOptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatoption.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetChatID(v)

		return nil
	case chatoption.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetKey(v)

		return nil
	case chatoption.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetValue(v)

		return nil
	case chatoption.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case chatoption.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown ChatOption field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChatOptionMutation) AddedFields() []string {
	var fields []string
	if m.addchat_id != nil {
		fields = append(fields, chatoption.FieldChatID)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChatOptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case chatoption.FieldChatID:
		return m.AddedChatID()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChatOptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case chatoption.FieldChatID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddChatID(v)

		return nil
	}

	return fmt.Errorf("unknown ChatOption numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChatOptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChatOptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChatOptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ChatOption nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChatOptionMutation) ResetField(name string) error {
	switch name {
	case chatoption.FieldChatID:
		m.ResetChatID()
		return nil
	case chatoption.FieldKey:
		m.ResetKey()
		return nil
	case chatoption.FieldValue:
		m.ResetValue()
		return nil
	case chatoption.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case chatoption.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown ChatOption field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChatOptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChatOptionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChatOptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChatOptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChatOptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChatOptionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChatOptionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ChatOption unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChatOptionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ChatOption edge %s", name)
}

// GameAccountMutation represents an operation that mutates the GameAccount nodes in the graph.
type GameAccountMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	user_id       *int64
	adduser_id    *int64
	account_id    *string
	game_token    *string
	cookie_token  *string
	stoken        *string
	mid           *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GameAccount, error)
	predicates    []predicate.GameAccount
}

var _ ent.Mutation = (*GameAccountMutation)(nil)

// gameaccountOption allows management of the mutation configuration using functional options.
type gameaccountOption func(*GameAccountMutation)

// newGameAccountMutation creates new mutation for the GameAccount entity.
func newGameAccountMutation(c config, op Op, opts ...gameaccountOption) *GameAccountMutation {
	m := &GameAccountMutation{
		config:        c,
		op:            op,
		typ:           TypeGameAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withGameAccountID sets the ID field of the mutation.
func withGameAccountID(id int64) gameaccountOption {
	return func(m *GameAccountMutation) {
		var (
			err   error
			once  sync.Once
			value *GameAccount
		)

		m.oldValue = func(ctx context.Context) (*GameAccount, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameAccount.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withGameAccount sets the old GameAccount of the mutation.
func withGameAccount(node *GameAccount) gameaccountOption {
	return func(m *GameAccountMutation) {
		m.oldValue = func(context.Context) (*GameAccount, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameAccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameAccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameAccount entities.
func (m *GameAccountMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameAccountMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameAccountMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameAccount.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *GameAccountMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GameAccountMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}

	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}

	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *GameAccountMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *GameAccountMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GameAccountMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *GameAccountMutation) SetAccountID(s string) {
	m.account_id = &s
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GameAccountMutation) AccountID() (r string, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}

	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}

	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GameAccountMutation) ResetAccountID() {
	m.account_id = nil
}

// SetGameToken sets the "game_token" field.
func (m *GameAccountMutation) SetGameToken(s string) {
	m.game_token = &s
}

// GameToken returns the value of the "game_token" field in the mutation.
func (m *GameAccountMutation) GameToken() (r string, exists bool) {
	v := m.game_token
	if v == nil {
		return
	}

	return *v, true
}

// OldGameToken returns the old "game_token" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldGameToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGameToken is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGameToken requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGameToken: %w", err)
	}

	return oldValue.GameToken, nil
}

// ResetGameToken resets all changes to the "game_token" field.
func (m *GameAccountMutation) ResetGameToken() {
	m.game_token = nil
}

// SetCookieToken sets the "cookie_token" field.
func (m *GameAccountMutation) SetCookieToken(s string) {
	m.cookie_token = &s
}

// CookieToken returns the value of the "cookie_token" field in the mutation.
func (m *GameAccountMutation) CookieToken() (r string, exists bool) {
	v := m.cookie_token
	if v == nil {
		return
	}

	return *v, true
}

// OldCookieToken returns the old "cookie_token" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldCookieToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCookieToken is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCookieToken requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCookieToken: %w", err)
	}

	return oldValue.CookieToken, nil
}

// ResetCookieToken resets all changes to the "cookie_token" field.
func (m *GameAccountMutation) ResetCookieToken() {
	m.cookie_token = nil
}

// SetStoken sets the "stoken" field.
func (m *GameAccountMutation) SetStoken(s string) {
	m.stoken = &s
}

// Stoken returns the value of the "stoken" field in the mutation.
func (m *GameAccountMutation) Stoken() (r string, exists bool) {
	v := m.stoken
	if v == nil {
		return
	}

	return *v, true
}

// OldStoken returns the old "stoken" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldStoken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoken is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoken requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoken: %w", err)
	}

	return oldValue.Stoken, nil
}

// ResetStoken resets all changes to the "stoken" field.
func (m *GameAccountMutation) ResetStoken() {
	m.stoken = nil
}

// SetMid sets the "mid" field.
func (m *GameAccountMutation) SetMid(s string) {
	m.mid = &s
}

// Mid returns the value of the "mid" field in the mutation.
func (m *GameAccountMutation) Mid() (r string, exists bool) {
	v := m.mid
	if v == nil {
		return
	}

	return *v, true
}

// OldMid returns the old "mid" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldMid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMid is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMid requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMid: %w", err)
	}

	return oldValue.Mid, nil
}

// ResetMid resets all changes to the "mid" field.
func (m *GameAccountMutation) ResetMid() {
	m.mid = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GameAccountMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GameAccountMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GameAccountMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GameAccountMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GameAccountMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GameAccount entity.
// If the GameAccount object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameAccountMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GameAccountMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the GameAccountMutation builder.
func (m *GameAccountMutation) Where(ps ...predicate.GameAccount) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameAccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameAccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameAccount, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *GameAccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameAccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameAccount).
func (m *GameAccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameAccountMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, gameaccount.FieldUserID)
	}

	if m.account_id != nil {
		fields = append(fields, gameaccount.FieldAccountID)
	}

	if m.game_token != nil {
		fields = append(fields, gameaccount.FieldGameToken)
	}

	if m.cookie_token != nil {
		fields = append(fields, gameaccount.FieldCookieToken)
	}

	if m.stoken != nil {
		fields = append(fields, gameaccount.FieldStoken)
	}

	if m.mid != nil {
		fields = append(fields, gameaccount.FieldMid)
	}

	if m.create_at != nil {
		fields = append(fields, gameaccount.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, gameaccount.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameAccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gameaccount.FieldUserID:
		return m.UserID()
	case gameaccount.FieldAccountID:
		return m.AccountID()
	case gameaccount.FieldGameToken:
		return m.GameToken()
	case gameaccount.FieldCookieToken:
		return m.CookieToken()
	case gameaccount.FieldStoken:
		return m.Stoken()
	case gameaccount.FieldMid:
		return m.Mid()
	case gameaccount.FieldCreateAt:
		return m.CreateAt()
	case gameaccount.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameAccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gameaccount.FieldUserID:
		return m.OldUserID(ctx)
	case gameaccount.FieldAccountID:
		return m.OldAccountID(ctx)
	case gameaccount.FieldGameToken:
		return m.OldGameToken(ctx)
	case gameaccount.FieldCookieToken:
		return m.OldCookieToken(ctx)
	case gameaccount.FieldStoken:
		return m.OldStoken(ctx)
	case gameaccount.FieldMid:
		return m.OldMid(ctx)
	case gameaccount.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case gameaccount.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown GameAccount field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameAccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gameaccount.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserID(v)

		return nil
	case gameaccount.FieldAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetAccountID(v)

		return nil
	case gameaccount.FieldGameToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetGameToken(v)

		return nil
	case gameaccount.FieldCookieToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCookieToken(v)

		return nil
	case gameaccount.FieldStoken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetStoken(v)

		return nil
	case gameaccount.FieldMid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetMid(v)

		return nil
	case gameaccount.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case gameaccount.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown GameAccount field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameAccountMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, gameaccount.FieldUserID)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameAccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gameaccount.FieldUserID:
		return m.AddedUserID()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameAccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gameaccount.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddUserID(v)

		return nil
	}

	return fmt.Errorf("unknown GameAccount numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameAccountMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameAccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameAccountMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GameAccount nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameAccountMutation) ResetField(name string) error {
	switch name {
	case gameaccount.FieldUserID:
		m.ResetUserID()
		return nil
	case gameaccount.FieldAccountID:
		m.ResetAccountID()
		return nil
	case gameaccount.FieldGameToken:
		m.ResetGameToken()
		return nil
	case gameaccount.FieldCookieToken:
		m.ResetCookieToken()
		return nil
	case gameaccount.FieldStoken:
		m.ResetStoken()
		return nil
	case gameaccount.FieldMid:
		m.ResetMid()
		return nil
	case gameaccount.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case gameaccount.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown GameAccount field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameAccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameAccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameAccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameAccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameAccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameAccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameAccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GameAccount unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameAccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GameAccount edge %s", name)
}

// GameRoleMutation represents an operation that mutates the GameRole nodes in the graph.
type GameRoleMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	user_id       *int64
	adduser_id    *int64
	account_id    *string
	role_id       *string
	level         *int
	addlevel      *int
	region        *string
	region_name   *string
	nick_name     *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GameRole, error)
	predicates    []predicate.GameRole
}

var _ ent.Mutation = (*GameRoleMutation)(nil)

// gameroleOption allows management of the mutation configuration using functional options.
type gameroleOption func(*GameRoleMutation)

// newGameRoleMutation creates new mutation for the GameRole entity.
func newGameRoleMutation(c config, op Op, opts ...gameroleOption) *GameRoleMutation {
	m := &GameRoleMutation{
		config:        c,
		op:            op,
		typ:           TypeGameRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withGameRoleID sets the ID field of the mutation.
func withGameRoleID(id int64) gameroleOption {
	return func(m *GameRoleMutation) {
		var (
			err   error
			once  sync.Once
			value *GameRole
		)

		m.oldValue = func(ctx context.Context) (*GameRole, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameRole.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withGameRole sets the old GameRole of the mutation.
func withGameRole(node *GameRole) gameroleOption {
	return func(m *GameRoleMutation) {
		m.oldValue = func(context.Context) (*GameRole, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameRoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameRoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameRole entities.
func (m *GameRoleMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameRoleMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameRoleMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameRole.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *GameRoleMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GameRoleMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}

	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}

	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *GameRoleMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *GameRoleMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GameRoleMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *GameRoleMutation) SetAccountID(s string) {
	m.account_id = &s
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GameRoleMutation) AccountID() (r string, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}

	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}

	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GameRoleMutation) ResetAccountID() {
	m.account_id = nil
}

// SetRoleID sets the "role_id" field.
func (m *GameRoleMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *GameRoleMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}

	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}

	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *GameRoleMutation) ResetRoleID() {
	m.role_id = nil
}

// SetLevel sets the "level" field.
func (m *GameRoleMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *GameRoleMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}

	return *v, true
}

// OldLevel returns the old "level" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}

	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *GameRoleMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *GameRoleMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}

	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *GameRoleMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetRegion sets the "region" field.
func (m *GameRoleMutation) SetRegion(s string) {
	m.region = &s
}

// Region returns the value of the "region" field in the mutation.
func (m *GameRoleMutation) Region() (r string, exists bool) {
	v := m.region
	if v == nil {
		return
	}

	return *v, true
}

// OldRegion returns the old "region" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldRegion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegion is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegion requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegion: %w", err)
	}

	return oldValue.Region, nil
}

// ResetRegion resets all changes to the "region" field.
func (m *GameRoleMutation) ResetRegion() {
	m.region = nil
}

// SetRegionName sets the "region_name" field.
func (m *GameRoleMutation) SetRegionName(s string) {
	m.region_name = &s
}

// RegionName returns the value of the "region_name" field in the mutation.
func (m *GameRoleMutation) RegionName() (r string, exists bool) {
	v := m.region_name
	if v == nil {
		return
	}

	return *v, true
}

// OldRegionName returns the old "region_name" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldRegionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegionName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegionName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegionName: %w", err)
	}

	return oldValue.RegionName, nil
}

// ResetRegionName resets all changes to the "region_name" field.
func (m *GameRoleMutation) ResetRegionName() {
	m.region_name = nil
}

// SetNickName sets the "nick_name" field.
func (m *GameRoleMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *GameRoleMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}

	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}

	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *GameRoleMutation) ResetNickName() {
	m.nick_name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GameRoleMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GameRoleMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GameRoleMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GameRoleMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GameRoleMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GameRole entity.
// If the GameRole object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GameRoleMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the GameRoleMutation builder.
func (m *GameRoleMutation) Where(ps ...predicate.GameRole) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameRoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameRoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameRole, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *GameRoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameRoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameRole).
func (m *GameRoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameRoleMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.user_id != nil {
		fields = append(fields, gamerole.FieldUserID)
	}

	if m.account_id != nil {
		fields = append(fields, gamerole.FieldAccountID)
	}

	if m.role_id != nil {
		fields = append(fields, gamerole.FieldRoleID)
	}

	if m.level != nil {
		fields = append(fields, gamerole.FieldLevel)
	}

	if m.region != nil {
		fields = append(fields, gamerole.FieldRegion)
	}

	if m.region_name != nil {
		fields = append(fields, gamerole.FieldRegionName)
	}

	if m.nick_name != nil {
		fields = append(fields, gamerole.FieldNickName)
	}

	if m.create_at != nil {
		fields = append(fields, gamerole.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, gamerole.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameRoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gamerole.FieldUserID:
		return m.UserID()
	case gamerole.FieldAccountID:
		return m.AccountID()
	case gamerole.FieldRoleID:
		return m.RoleID()
	case gamerole.FieldLevel:
		return m.Level()
	case gamerole.FieldRegion:
		return m.Region()
	case gamerole.FieldRegionName:
		return m.RegionName()
	case gamerole.FieldNickName:
		return m.NickName()
	case gamerole.FieldCreateAt:
		return m.CreateAt()
	case gamerole.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameRoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gamerole.FieldUserID:
		return m.OldUserID(ctx)
	case gamerole.FieldAccountID:
		return m.OldAccountID(ctx)
	case gamerole.FieldRoleID:
		return m.OldRoleID(ctx)
	case gamerole.FieldLevel:
		return m.OldLevel(ctx)
	case gamerole.FieldRegion:
		return m.OldRegion(ctx)
	case gamerole.FieldRegionName:
		return m.OldRegionName(ctx)
	case gamerole.FieldNickName:
		return m.OldNickName(ctx)
	case gamerole.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case gamerole.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown GameRole field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameRoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gamerole.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserID(v)

		return nil
	case gamerole.FieldAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetAccountID(v)

		return nil
	case gamerole.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetRoleID(v)

		return nil
	case gamerole.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetLevel(v)

		return nil
	case gamerole.FieldRegion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetRegion(v)

		return nil
	case gamerole.FieldRegionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetRegionName(v)

		return nil
	case gamerole.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetNickName(v)

		return nil
	case gamerole.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case gamerole.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown GameRole field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameRoleMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, gamerole.FieldUserID)
	}

	if m.addlevel != nil {
		fields = append(fields, gamerole.FieldLevel)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameRoleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gamerole.FieldUserID:
		return m.AddedUserID()
	case gamerole.FieldLevel:
		return m.AddedLevel()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameRoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gamerole.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddUserID(v)

		return nil
	case gamerole.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddLevel(v)

		return nil
	}

	return fmt.Errorf("unknown GameRole numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameRoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameRoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameRoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GameRole nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameRoleMutation) ResetField(name string) error {
	switch name {
	case gamerole.FieldUserID:
		m.ResetUserID()
		return nil
	case gamerole.FieldAccountID:
		m.ResetAccountID()
		return nil
	case gamerole.FieldRoleID:
		m.ResetRoleID()
		return nil
	case gamerole.FieldLevel:
		m.ResetLevel()
		return nil
	case gamerole.FieldRegion:
		m.ResetRegion()
		return nil
	case gamerole.FieldRegionName:
		m.ResetRegionName()
		return nil
	case gamerole.FieldNickName:
		m.ResetNickName()
		return nil
	case gamerole.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case gamerole.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown GameRole field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameRoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameRoleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameRoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameRoleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameRoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameRoleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameRoleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GameRole unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameRoleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GameRole edge %s", name)
}

// GameRoleAttributeMutation represents an operation that mutates the GameRoleAttribute nodes in the graph.
type GameRoleAttributeMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	user_id       *int64
	adduser_id    *int64
	account_id    *string
	role_id       *string
	name          *string
	_type         *int
	add_type      *int
	value         *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GameRoleAttribute, error)
	predicates    []predicate.GameRoleAttribute
}

var _ ent.Mutation = (*GameRoleAttributeMutation)(nil)

// gameroleattributeOption allows management of the mutation configuration using functional options.
type gameroleattributeOption func(*GameRoleAttributeMutation)

// newGameRoleAttributeMutation creates new mutation for the GameRoleAttribute entity.
func newGameRoleAttributeMutation(c config, op Op, opts ...gameroleattributeOption) *GameRoleAttributeMutation {
	m := &GameRoleAttributeMutation{
		config:        c,
		op:            op,
		typ:           TypeGameRoleAttribute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withGameRoleAttributeID sets the ID field of the mutation.
func withGameRoleAttributeID(id int64) gameroleattributeOption {
	return func(m *GameRoleAttributeMutation) {
		var (
			err   error
			once  sync.Once
			value *GameRoleAttribute
		)

		m.oldValue = func(ctx context.Context) (*GameRoleAttribute, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameRoleAttribute.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withGameRoleAttribute sets the old GameRoleAttribute of the mutation.
func withGameRoleAttribute(node *GameRoleAttribute) gameroleattributeOption {
	return func(m *GameRoleAttributeMutation) {
		m.oldValue = func(context.Context) (*GameRoleAttribute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameRoleAttributeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameRoleAttributeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameRoleAttribute entities.
func (m *GameRoleAttributeMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameRoleAttributeMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameRoleAttributeMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameRoleAttribute.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *GameRoleAttributeMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GameRoleAttributeMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}

	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}

	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *GameRoleAttributeMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *GameRoleAttributeMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GameRoleAttributeMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *GameRoleAttributeMutation) SetAccountID(s string) {
	m.account_id = &s
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GameRoleAttributeMutation) AccountID() (r string, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}

	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}

	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GameRoleAttributeMutation) ResetAccountID() {
	m.account_id = nil
}

// SetRoleID sets the "role_id" field.
func (m *GameRoleAttributeMutation) SetRoleID(s string) {
	m.role_id = &s
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *GameRoleAttributeMutation) RoleID() (r string, exists bool) {
	v := m.role_id
	if v == nil {
		return
	}

	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldRoleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}

	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *GameRoleAttributeMutation) ResetRoleID() {
	m.role_id = nil
}

// SetName sets the "name" field.
func (m *GameRoleAttributeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GameRoleAttributeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}

	return *v, true
}

// OldName returns the old "name" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}

	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GameRoleAttributeMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *GameRoleAttributeMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *GameRoleAttributeMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}

	return *v, true
}

// OldType returns the old "type" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}

	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *GameRoleAttributeMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *GameRoleAttributeMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}

	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *GameRoleAttributeMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetValue sets the "value" field.
func (m *GameRoleAttributeMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *GameRoleAttributeMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}

	return *v, true
}

// OldValue returns the old "value" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}

	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *GameRoleAttributeMutation) ResetValue() {
	m.value = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GameRoleAttributeMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GameRoleAttributeMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GameRoleAttributeMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GameRoleAttributeMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GameRoleAttributeMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GameRoleAttribute entity.
// If the GameRoleAttribute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameRoleAttributeMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GameRoleAttributeMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the GameRoleAttributeMutation builder.
func (m *GameRoleAttributeMutation) Where(ps ...predicate.GameRoleAttribute) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameRoleAttributeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameRoleAttributeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameRoleAttribute, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *GameRoleAttributeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameRoleAttributeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameRoleAttribute).
func (m *GameRoleAttributeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameRoleAttributeMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, gameroleattribute.FieldUserID)
	}

	if m.account_id != nil {
		fields = append(fields, gameroleattribute.FieldAccountID)
	}

	if m.role_id != nil {
		fields = append(fields, gameroleattribute.FieldRoleID)
	}

	if m.name != nil {
		fields = append(fields, gameroleattribute.FieldName)
	}

	if m._type != nil {
		fields = append(fields, gameroleattribute.FieldType)
	}

	if m.value != nil {
		fields = append(fields, gameroleattribute.FieldValue)
	}

	if m.create_at != nil {
		fields = append(fields, gameroleattribute.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, gameroleattribute.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameRoleAttributeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gameroleattribute.FieldUserID:
		return m.UserID()
	case gameroleattribute.FieldAccountID:
		return m.AccountID()
	case gameroleattribute.FieldRoleID:
		return m.RoleID()
	case gameroleattribute.FieldName:
		return m.Name()
	case gameroleattribute.FieldType:
		return m.GetType()
	case gameroleattribute.FieldValue:
		return m.Value()
	case gameroleattribute.FieldCreateAt:
		return m.CreateAt()
	case gameroleattribute.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameRoleAttributeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gameroleattribute.FieldUserID:
		return m.OldUserID(ctx)
	case gameroleattribute.FieldAccountID:
		return m.OldAccountID(ctx)
	case gameroleattribute.FieldRoleID:
		return m.OldRoleID(ctx)
	case gameroleattribute.FieldName:
		return m.OldName(ctx)
	case gameroleattribute.FieldType:
		return m.OldType(ctx)
	case gameroleattribute.FieldValue:
		return m.OldValue(ctx)
	case gameroleattribute.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case gameroleattribute.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown GameRoleAttribute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameRoleAttributeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gameroleattribute.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserID(v)

		return nil
	case gameroleattribute.FieldAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetAccountID(v)

		return nil
	case gameroleattribute.FieldRoleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetRoleID(v)

		return nil
	case gameroleattribute.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetName(v)

		return nil
	case gameroleattribute.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetType(v)

		return nil
	case gameroleattribute.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetValue(v)

		return nil
	case gameroleattribute.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case gameroleattribute.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown GameRoleAttribute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameRoleAttributeMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, gameroleattribute.FieldUserID)
	}

	if m.add_type != nil {
		fields = append(fields, gameroleattribute.FieldType)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameRoleAttributeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gameroleattribute.FieldUserID:
		return m.AddedUserID()
	case gameroleattribute.FieldType:
		return m.AddedType()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameRoleAttributeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gameroleattribute.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddUserID(v)

		return nil
	case gameroleattribute.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddType(v)

		return nil
	}

	return fmt.Errorf("unknown GameRoleAttribute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameRoleAttributeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameRoleAttributeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameRoleAttributeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GameRoleAttribute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameRoleAttributeMutation) ResetField(name string) error {
	switch name {
	case gameroleattribute.FieldUserID:
		m.ResetUserID()
		return nil
	case gameroleattribute.FieldAccountID:
		m.ResetAccountID()
		return nil
	case gameroleattribute.FieldRoleID:
		m.ResetRoleID()
		return nil
	case gameroleattribute.FieldName:
		m.ResetName()
		return nil
	case gameroleattribute.FieldType:
		m.ResetType()
		return nil
	case gameroleattribute.FieldValue:
		m.ResetValue()
		return nil
	case gameroleattribute.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case gameroleattribute.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown GameRoleAttribute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameRoleAttributeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameRoleAttributeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameRoleAttributeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameRoleAttributeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameRoleAttributeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameRoleAttributeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameRoleAttributeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GameRoleAttribute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameRoleAttributeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GameRoleAttribute edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	user_id       *int64
	adduser_id    *int64
	is_bot        *bool
	user_name     *string
	first_name    *string
	last_name     *string
	create_at     *time.Time
	update_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}

	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int64) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)

		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})

			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()

	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entity: mutation is not running in a transaction")
	}

	tx := &Tx{config: m.config}
	tx.init()

	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}

	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}

		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}

	return *v, true
}

// OldUserID returns the old "user_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}

	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}

	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetIsBot sets the "is_bot" field.
func (m *UserMutation) SetIsBot(b bool) {
	m.is_bot = &b
}

// IsBot returns the value of the "is_bot" field in the mutation.
func (m *UserMutation) IsBot() (r bool, exists bool) {
	v := m.is_bot
	if v == nil {
		return
	}

	return *v, true
}

// OldIsBot returns the old "is_bot" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsBot(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsBot is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsBot requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsBot: %w", err)
	}

	return oldValue.IsBot, nil
}

// ResetIsBot resets all changes to the "is_bot" field.
func (m *UserMutation) ResetIsBot() {
	m.is_bot = nil
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}

	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}

	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}

	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}

	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}

	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}

	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserMutation) SetCreateAt(t time.Time) {
	m.create_at = &t
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserMutation) CreateAt() (r time.Time, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}

	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}

	return oldValue.CreateAt, nil
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserMutation) ResetCreateAt() {
	m.create_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserMutation) SetUpdateAt(t time.Time) {
	m.update_at = &t
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserMutation) UpdateAt() (r time.Time, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}

	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}

	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}

	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}

	return oldValue.UpdateAt, nil
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserMutation) ResetUpdateAt() {
	m.update_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}

	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, user.FieldUserID)
	}

	if m.is_bot != nil {
		fields = append(fields, user.FieldIsBot)
	}

	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}

	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}

	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}

	if m.create_at != nil {
		fields = append(fields, user.FieldCreateAt)
	}

	if m.update_at != nil {
		fields = append(fields, user.FieldUpdateAt)
	}

	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.UserID()
	case user.FieldIsBot:
		return m.IsBot()
	case user.FieldUserName:
		return m.UserName()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldCreateAt:
		return m.CreateAt()
	case user.FieldUpdateAt:
		return m.UpdateAt()
	}

	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserID:
		return m.OldUserID(ctx)
	case user.FieldIsBot:
		return m.OldIsBot(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case user.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	}

	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserID(v)

		return nil
	case user.FieldIsBot:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetIsBot(v)

		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUserName(v)

		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetFirstName(v)

		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetLastName(v)

		return nil
	case user.FieldCreateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetCreateAt(v)

		return nil
	case user.FieldUpdateAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.SetUpdateAt(v)

		return nil
	}

	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, user.FieldUserID)
	}

	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserID:
		return m.AddedUserID()
	}

	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}

		m.AddUserID(v)

		return nil
	}

	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserID:
		m.ResetUserID()
		return nil
	case user.FieldIsBot:
		m.ResetIsBot()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case user.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	}

	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
