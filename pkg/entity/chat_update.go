// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/chat"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// ChatUpdate is the builder for updating Chat entities.
type ChatUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMutation
}

// Where appends a list predicates to the ChatUpdate builder.
func (cu *ChatUpdate) Where(ps ...predicate.Chat) *ChatUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetChatID sets the "chat_id" field.
func (cu *ChatUpdate) SetChatID(i int64) *ChatUpdate {
	cu.mutation.ResetChatID()
	cu.mutation.SetChatID(i)
	return cu
}

// AddChatID adds i to the "chat_id" field.
func (cu *ChatUpdate) AddChatID(i int64) *ChatUpdate {
	cu.mutation.AddChatID(i)
	return cu
}

// SetType sets the "type" field.
func (cu *ChatUpdate) SetType(s string) *ChatUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableType(s *string) *ChatUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetIsForum sets the "is_forum" field.
func (cu *ChatUpdate) SetIsForum(b bool) *ChatUpdate {
	cu.mutation.SetIsForum(b)
	return cu
}

// SetNillableIsForum sets the "is_forum" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableIsForum(b *bool) *ChatUpdate {
	if b != nil {
		cu.SetIsForum(*b)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChatUpdate) SetTitle(s string) *ChatUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableTitle(s *string) *ChatUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetUserName sets the "user_name" field.
func (cu *ChatUpdate) SetUserName(s string) *ChatUpdate {
	cu.mutation.SetUserName(s)
	return cu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableUserName(s *string) *ChatUpdate {
	if s != nil {
		cu.SetUserName(*s)
	}
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *ChatUpdate) SetFirstName(s string) *ChatUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableFirstName(s *string) *ChatUpdate {
	if s != nil {
		cu.SetFirstName(*s)
	}
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *ChatUpdate) SetLastName(s string) *ChatUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableLastName(s *string) *ChatUpdate {
	if s != nil {
		cu.SetLastName(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *ChatUpdate) SetDescription(s string) *ChatUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableDescription(s *string) *ChatUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// SetCreateAt sets the "create_at" field.
func (cu *ChatUpdate) SetCreateAt(t time.Time) *ChatUpdate {
	cu.mutation.SetCreateAt(t)
	return cu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableCreateAt(t *time.Time) *ChatUpdate {
	if t != nil {
		cu.SetCreateAt(*t)
	}
	return cu
}

// SetUpdateAt sets the "update_at" field.
func (cu *ChatUpdate) SetUpdateAt(t time.Time) *ChatUpdate {
	cu.mutation.SetUpdateAt(t)
	return cu
}

// Mutation returns the ChatMutation object of the builder.
func (cu *ChatUpdate) Mutation() *ChatMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChatUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks[int, ChatMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChatUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChatUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChatUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ChatUpdate) defaults() {
	if _, ok := cu.mutation.UpdateAt(); !ok {
		v := chat.UpdateDefaultUpdateAt()
		cu.mutation.SetUpdateAt(v)
	}
}

func (cu *ChatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ChatID(); ok {
		_spec.SetField(chat.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedChatID(); ok {
		_spec.AddField(chat.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(chat.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.IsForum(); ok {
		_spec.SetField(chat.FieldIsForum, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.UserName(); ok {
		_spec.SetField(chat.FieldUserName, field.TypeString, value)
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.SetField(chat.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.SetField(chat.FieldLastName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(chat.FieldDescription, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreateAt(); ok {
		_spec.SetField(chat.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdateAt(); ok {
		_spec.SetField(chat.FieldUpdateAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChatUpdateOne is the builder for updating a single Chat entity.
type ChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMutation
}

// SetChatID sets the "chat_id" field.
func (cuo *ChatUpdateOne) SetChatID(i int64) *ChatUpdateOne {
	cuo.mutation.ResetChatID()
	cuo.mutation.SetChatID(i)
	return cuo
}

// AddChatID adds i to the "chat_id" field.
func (cuo *ChatUpdateOne) AddChatID(i int64) *ChatUpdateOne {
	cuo.mutation.AddChatID(i)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ChatUpdateOne) SetType(s string) *ChatUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableType(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetIsForum sets the "is_forum" field.
func (cuo *ChatUpdateOne) SetIsForum(b bool) *ChatUpdateOne {
	cuo.mutation.SetIsForum(b)
	return cuo
}

// SetNillableIsForum sets the "is_forum" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableIsForum(b *bool) *ChatUpdateOne {
	if b != nil {
		cuo.SetIsForum(*b)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ChatUpdateOne) SetTitle(s string) *ChatUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableTitle(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetUserName sets the "user_name" field.
func (cuo *ChatUpdateOne) SetUserName(s string) *ChatUpdateOne {
	cuo.mutation.SetUserName(s)
	return cuo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableUserName(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetUserName(*s)
	}
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *ChatUpdateOne) SetFirstName(s string) *ChatUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableFirstName(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetFirstName(*s)
	}
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *ChatUpdateOne) SetLastName(s string) *ChatUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableLastName(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetLastName(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *ChatUpdateOne) SetDescription(s string) *ChatUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableDescription(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// SetCreateAt sets the "create_at" field.
func (cuo *ChatUpdateOne) SetCreateAt(t time.Time) *ChatUpdateOne {
	cuo.mutation.SetCreateAt(t)
	return cuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableCreateAt(t *time.Time) *ChatUpdateOne {
	if t != nil {
		cuo.SetCreateAt(*t)
	}
	return cuo
}

// SetUpdateAt sets the "update_at" field.
func (cuo *ChatUpdateOne) SetUpdateAt(t time.Time) *ChatUpdateOne {
	cuo.mutation.SetUpdateAt(t)
	return cuo
}

// Mutation returns the ChatMutation object of the builder.
func (cuo *ChatUpdateOne) Mutation() *ChatMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ChatUpdate builder.
func (cuo *ChatUpdateOne) Where(ps ...predicate.Chat) *ChatUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChatUpdateOne) Select(field string, fields ...string) *ChatUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chat entity.
func (cuo *ChatUpdateOne) Save(ctx context.Context) (*Chat, error) {
	cuo.defaults()
	return withHooks[*Chat, ChatMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChatUpdateOne) SaveX(ctx context.Context) *Chat {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChatUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChatUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ChatUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateAt(); !ok {
		v := chat.UpdateDefaultUpdateAt()
		cuo.mutation.SetUpdateAt(v)
	}
}

func (cuo *ChatUpdateOne) sqlSave(ctx context.Context) (_node *Chat, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entity: missing "Chat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chat.FieldID)
		for _, f := range fields {
			if !chat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
			}
			if f != chat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ChatID(); ok {
		_spec.SetField(chat.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedChatID(); ok {
		_spec.AddField(chat.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(chat.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.IsForum(); ok {
		_spec.SetField(chat.FieldIsForum, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.UserName(); ok {
		_spec.SetField(chat.FieldUserName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.SetField(chat.FieldFirstName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.SetField(chat.FieldLastName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(chat.FieldDescription, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreateAt(); ok {
		_spec.SetField(chat.FieldCreateAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdateAt(); ok {
		_spec.SetField(chat.FieldUpdateAt, field.TypeTime, value)
	}
	_node = &Chat{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
