// Code generated by ent, DO NOT EDIT.

package entity

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lostsnow/keqing/pkg/entity/gamerole"
)

// GameRole is the model entity for the GameRole schema.
type GameRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int64 `json:"user_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID string `json:"account_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID string `json:"role_id,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// RegionName holds the value of the "region_name" field.
	RegionName string `json:"region_name,omitempty"`
	// NickName holds the value of the "nick_name" field.
	NickName string `json:"nick_name,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt time.Time `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamerole.FieldID, gamerole.FieldUserID, gamerole.FieldLevel:
			values[i] = new(sql.NullInt64)
		case gamerole.FieldAccountID, gamerole.FieldRoleID, gamerole.FieldRegion, gamerole.FieldRegionName, gamerole.FieldNickName:
			values[i] = new(sql.NullString)
		case gamerole.FieldCreateAt, gamerole.FieldUpdateAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameRole fields.
func (gr *GameRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamerole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int64(value.Int64)
		case gamerole.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				gr.UserID = value.Int64
			}
		case gamerole.FieldAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				gr.AccountID = value.String
			}
		case gamerole.FieldRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				gr.RoleID = value.String
			}
		case gamerole.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				gr.Level = int(value.Int64)
			}
		case gamerole.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				gr.Region = value.String
			}
		case gamerole.FieldRegionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region_name", values[i])
			} else if value.Valid {
				gr.RegionName = value.String
			}
		case gamerole.FieldNickName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nick_name", values[i])
			} else if value.Valid {
				gr.NickName = value.String
			}
		case gamerole.FieldCreateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gr.CreateAt = value.Time
			}
		case gamerole.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gr.UpdateAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GameRole.
// Note that you need to call GameRole.Unwrap() before calling this method if this GameRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *GameRole) Update() *GameRoleUpdateOne {
	return NewGameRoleClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the GameRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *GameRole) Unwrap() *GameRole {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("entity: GameRole is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *GameRole) String() string {
	var builder strings.Builder
	builder.WriteString("GameRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", gr.UserID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(gr.AccountID)
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(gr.RoleID)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", gr.Level))
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(gr.Region)
	builder.WriteString(", ")
	builder.WriteString("region_name=")
	builder.WriteString(gr.RegionName)
	builder.WriteString(", ")
	builder.WriteString("nick_name=")
	builder.WriteString(gr.NickName)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(gr.CreateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(gr.UpdateAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// GameRoles is a parsable slice of GameRole.
type GameRoles []*GameRole
