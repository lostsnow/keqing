// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gamerole"
	"github.com/lostsnow/keqing/pkg/entity/predicate"
)

// GameRoleQuery is the builder for querying GameRole entities.
type GameRoleQuery struct {
	config
	ctx        *QueryContext
	order      []OrderFunc
	inters     []Interceptor
	predicates []predicate.GameRole
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameRoleQuery builder.
func (grq *GameRoleQuery) Where(ps ...predicate.GameRole) *GameRoleQuery {
	grq.predicates = append(grq.predicates, ps...)
	return grq
}

// Limit the number of records to be returned by this query.
func (grq *GameRoleQuery) Limit(limit int) *GameRoleQuery {
	grq.ctx.Limit = &limit
	return grq
}

// Offset to start from.
func (grq *GameRoleQuery) Offset(offset int) *GameRoleQuery {
	grq.ctx.Offset = &offset
	return grq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (grq *GameRoleQuery) Unique(unique bool) *GameRoleQuery {
	grq.ctx.Unique = &unique
	return grq
}

// Order specifies how the records should be ordered.
func (grq *GameRoleQuery) Order(o ...OrderFunc) *GameRoleQuery {
	grq.order = append(grq.order, o...)
	return grq
}

// First returns the first GameRole entity from the query.
// Returns a *NotFoundError when no GameRole was found.
func (grq *GameRoleQuery) First(ctx context.Context) (*GameRole, error) {
	nodes, err := grq.Limit(1).All(setContextOp(ctx, grq.ctx, "First"))
	if err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nil, &NotFoundError{gamerole.Label}
	}

	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (grq *GameRoleQuery) FirstX(ctx context.Context) *GameRole {
	node, err := grq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}

	return node
}

// FirstID returns the first GameRole ID from the query.
// Returns a *NotFoundError when no GameRole ID was found.
func (grq *GameRoleQuery) FirstID(ctx context.Context) (id int64, err error) {
	var ids []int64

	if ids, err = grq.Limit(1).IDs(setContextOp(ctx, grq.ctx, "FirstID")); err != nil {
		return
	}

	if len(ids) == 0 {
		err = &NotFoundError{gamerole.Label}
		return
	}

	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (grq *GameRoleQuery) FirstIDX(ctx context.Context) int64 {
	id, err := grq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}

	return id
}

// Only returns a single GameRole entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameRole entity is found.
// Returns a *NotFoundError when no GameRole entities are found.
func (grq *GameRoleQuery) Only(ctx context.Context) (*GameRole, error) {
	nodes, err := grq.Limit(2).All(setContextOp(ctx, grq.ctx, "Only"))
	if err != nil {
		return nil, err
	}

	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamerole.Label}
	default:
		return nil, &NotSingularError{gamerole.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (grq *GameRoleQuery) OnlyX(ctx context.Context) *GameRole {
	node, err := grq.Only(ctx)
	if err != nil {
		panic(err)
	}

	return node
}

// OnlyID is like Only, but returns the only GameRole ID in the query.
// Returns a *NotSingularError when more than one GameRole ID is found.
// Returns a *NotFoundError when no entities are found.
func (grq *GameRoleQuery) OnlyID(ctx context.Context) (id int64, err error) {
	var ids []int64

	if ids, err = grq.Limit(2).IDs(setContextOp(ctx, grq.ctx, "OnlyID")); err != nil {
		return
	}

	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamerole.Label}
	default:
		err = &NotSingularError{gamerole.Label}
	}

	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (grq *GameRoleQuery) OnlyIDX(ctx context.Context) int64 {
	id, err := grq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}

	return id
}

// All executes the query and returns a list of GameRoles.
func (grq *GameRoleQuery) All(ctx context.Context) ([]*GameRole, error) {
	ctx = setContextOp(ctx, grq.ctx, "All")
	if err := grq.prepareQuery(ctx); err != nil {
		return nil, err
	}

	qr := querierAll[[]*GameRole, *GameRoleQuery]()

	return withInterceptors[[]*GameRole](ctx, grq, qr, grq.inters)
}

// AllX is like All, but panics if an error occurs.
func (grq *GameRoleQuery) AllX(ctx context.Context) []*GameRole {
	nodes, err := grq.All(ctx)
	if err != nil {
		panic(err)
	}

	return nodes
}

// IDs executes the query and returns a list of GameRole IDs.
func (grq *GameRoleQuery) IDs(ctx context.Context) (ids []int64, err error) {
	if grq.ctx.Unique == nil && grq.path != nil {
		grq.Unique(true)
	}

	ctx = setContextOp(ctx, grq.ctx, "IDs")
	if err = grq.Select(gamerole.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}

	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (grq *GameRoleQuery) IDsX(ctx context.Context) []int64 {
	ids, err := grq.IDs(ctx)
	if err != nil {
		panic(err)
	}

	return ids
}

// Count returns the count of the given query.
func (grq *GameRoleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, grq.ctx, "Count")
	if err := grq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	return withInterceptors[int](ctx, grq, querierCount[*GameRoleQuery](), grq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (grq *GameRoleQuery) CountX(ctx context.Context) int {
	count, err := grq.Count(ctx)
	if err != nil {
		panic(err)
	}

	return count
}

// Exist returns true if the query has elements in the graph.
func (grq *GameRoleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, grq.ctx, "Exist")

	switch _, err := grq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entity: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (grq *GameRoleQuery) ExistX(ctx context.Context) bool {
	exist, err := grq.Exist(ctx)
	if err != nil {
		panic(err)
	}

	return exist
}

// Clone returns a duplicate of the GameRoleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (grq *GameRoleQuery) Clone() *GameRoleQuery {
	if grq == nil {
		return nil
	}

	return &GameRoleQuery{
		config:     grq.config,
		ctx:        grq.ctx.Clone(),
		order:      append([]OrderFunc{}, grq.order...),
		inters:     append([]Interceptor{}, grq.inters...),
		predicates: append([]predicate.GameRole{}, grq.predicates...),
		// clone intermediate query.
		sql:  grq.sql.Clone(),
		path: grq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameRole.Query().
//		GroupBy(gamerole.FieldUserID).
//		Aggregate(entity.Count()).
//		Scan(ctx, &v)
func (grq *GameRoleQuery) GroupBy(field string, fields ...string) *GameRoleGroupBy {
	grq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameRoleGroupBy{build: grq}
	grbuild.flds = &grq.ctx.Fields
	grbuild.label = gamerole.Label
	grbuild.scan = grbuild.Scan

	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int64 `json:"user_id,omitempty"`
//	}
//
//	client.GameRole.Query().
//		Select(gamerole.FieldUserID).
//		Scan(ctx, &v)
func (grq *GameRoleQuery) Select(fields ...string) *GameRoleSelect {
	grq.ctx.Fields = append(grq.ctx.Fields, fields...)
	sbuild := &GameRoleSelect{GameRoleQuery: grq}
	sbuild.label = gamerole.Label
	sbuild.flds, sbuild.scan = &grq.ctx.Fields, sbuild.Scan

	return sbuild
}

// Aggregate returns a GameRoleSelect configured with the given aggregations.
func (grq *GameRoleQuery) Aggregate(fns ...AggregateFunc) *GameRoleSelect {
	return grq.Select().Aggregate(fns...)
}

func (grq *GameRoleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range grq.inters {
		if inter == nil {
			return fmt.Errorf("entity: uninitialized interceptor (forgotten import entity/runtime?)")
		}

		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, grq); err != nil {
				return err
			}
		}
	}

	for _, f := range grq.ctx.Fields {
		if !gamerole.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entity: invalid field %q for query", f)}
		}
	}

	if grq.path != nil {
		prev, err := grq.path(ctx)
		if err != nil {
			return err
		}

		grq.sql = prev
	}

	return nil
}

func (grq *GameRoleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameRole, error) {
	var (
		nodes = []*GameRole{}
		_spec = grq.querySpec()
	)

	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameRole).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameRole{config: grq.config}
		nodes = append(nodes, node)

		return node.assignValues(columns, values)
	}

	if len(grq.modifiers) > 0 {
		_spec.Modifiers = grq.modifiers
	}

	for i := range hooks {
		hooks[i](ctx, _spec)
	}

	if err := sqlgraph.QueryNodes(ctx, grq.driver, _spec); err != nil {
		return nil, err
	}

	if len(nodes) == 0 {
		return nodes, nil
	}

	return nodes, nil
}

func (grq *GameRoleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := grq.querySpec()
	if len(grq.modifiers) > 0 {
		_spec.Modifiers = grq.modifiers
	}

	_spec.Node.Columns = grq.ctx.Fields
	if len(grq.ctx.Fields) > 0 {
		_spec.Unique = grq.ctx.Unique != nil && *grq.ctx.Unique
	}

	return sqlgraph.CountNodes(ctx, grq.driver, _spec)
}

func (grq *GameRoleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gamerole.Table, gamerole.Columns, sqlgraph.NewFieldSpec(gamerole.FieldID, field.TypeInt64))
	_spec.From = grq.sql

	if unique := grq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if grq.path != nil {
		_spec.Unique = true
	}

	if fields := grq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamerole.FieldID)

		for i := range fields {
			if fields[i] != gamerole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}

	if ps := grq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	if limit := grq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}

	if offset := grq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}

	if ps := grq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}

	return _spec
}

func (grq *GameRoleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(grq.driver.Dialect())
	t1 := builder.Table(gamerole.Table)

	columns := grq.ctx.Fields
	if len(columns) == 0 {
		columns = gamerole.Columns
	}

	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if grq.sql != nil {
		selector = grq.sql
		selector.Select(selector.Columns(columns...)...)
	}

	if grq.ctx.Unique != nil && *grq.ctx.Unique {
		selector.Distinct()
	}

	for _, m := range grq.modifiers {
		m(selector)
	}

	for _, p := range grq.predicates {
		p(selector)
	}

	for _, p := range grq.order {
		p(selector)
	}

	if offset := grq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}

	if limit := grq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}

	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (grq *GameRoleQuery) ForUpdate(opts ...sql.LockOption) *GameRoleQuery {
	if grq.driver.Dialect() == dialect.Postgres {
		grq.Unique(false)
	}

	grq.modifiers = append(grq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})

	return grq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (grq *GameRoleQuery) ForShare(opts ...sql.LockOption) *GameRoleQuery {
	if grq.driver.Dialect() == dialect.Postgres {
		grq.Unique(false)
	}

	grq.modifiers = append(grq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})

	return grq
}

// Modify adds a query modifier for attaching custom logic to queries.
func (grq *GameRoleQuery) Modify(modifiers ...func(s *sql.Selector)) *GameRoleSelect {
	grq.modifiers = append(grq.modifiers, modifiers...)
	return grq.Select()
}

// GameRoleGroupBy is the group-by builder for GameRole entities.
type GameRoleGroupBy struct {
	selector
	build *GameRoleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (grgb *GameRoleGroupBy) Aggregate(fns ...AggregateFunc) *GameRoleGroupBy {
	grgb.fns = append(grgb.fns, fns...)
	return grgb
}

// Scan applies the selector query and scans the result into the given value.
func (grgb *GameRoleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, grgb.build.ctx, "GroupBy")
	if err := grgb.build.prepareQuery(ctx); err != nil {
		return err
	}

	return scanWithInterceptors[*GameRoleQuery, *GameRoleGroupBy](ctx, grgb.build, grgb, grgb.build.inters, v)
}

func (grgb *GameRoleGroupBy) sqlScan(ctx context.Context, root *GameRoleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(grgb.fns))

	for _, fn := range grgb.fns {
		aggregation = append(aggregation, fn(selector))
	}

	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*grgb.flds)+len(grgb.fns))
		for _, f := range *grgb.flds {
			columns = append(columns, selector.C(f))
		}

		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}

	selector.GroupBy(selector.Columns(*grgb.flds...)...)

	if err := selector.Err(); err != nil {
		return err
	}

	rows := &sql.Rows{}
	query, args := selector.Query()

	if err := grgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}

	defer rows.Close()

	return sql.ScanSlice(rows, v)
}

// GameRoleSelect is the builder for selecting fields of GameRole entities.
type GameRoleSelect struct {
	*GameRoleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (grs *GameRoleSelect) Aggregate(fns ...AggregateFunc) *GameRoleSelect {
	grs.fns = append(grs.fns, fns...)
	return grs
}

// Scan applies the selector query and scans the result into the given value.
func (grs *GameRoleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, grs.ctx, "Select")
	if err := grs.prepareQuery(ctx); err != nil {
		return err
	}

	return scanWithInterceptors[*GameRoleQuery, *GameRoleSelect](ctx, grs.GameRoleQuery, grs, grs.inters, v)
}

func (grs *GameRoleSelect) sqlScan(ctx context.Context, root *GameRoleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(grs.fns))

	for _, fn := range grs.fns {
		aggregation = append(aggregation, fn(selector))
	}

	switch n := len(*grs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}

	rows := &sql.Rows{}
	query, args := selector.Query()

	if err := grs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}

	defer rows.Close()

	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (grs *GameRoleSelect) Modify(modifiers ...func(s *sql.Selector)) *GameRoleSelect {
	grs.modifiers = append(grs.modifiers, modifiers...)
	return grs
}
