// Code generated by ent, DO NOT EDIT.

package entity

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostsnow/keqing/pkg/entity/gameaccount"
)

// GameAccountCreate is the builder for creating a GameAccount entity.
type GameAccountCreate struct {
	config
	mutation *GameAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (gac *GameAccountCreate) SetUserID(i int64) *GameAccountCreate {
	gac.mutation.SetUserID(i)
	return gac
}

// SetAccountID sets the "account_id" field.
func (gac *GameAccountCreate) SetAccountID(s string) *GameAccountCreate {
	gac.mutation.SetAccountID(s)
	return gac
}

// SetGameToken sets the "game_token" field.
func (gac *GameAccountCreate) SetGameToken(s string) *GameAccountCreate {
	gac.mutation.SetGameToken(s)
	return gac
}

// SetNillableGameToken sets the "game_token" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableGameToken(s *string) *GameAccountCreate {
	if s != nil {
		gac.SetGameToken(*s)
	}

	return gac
}

// SetCookieToken sets the "cookie_token" field.
func (gac *GameAccountCreate) SetCookieToken(s string) *GameAccountCreate {
	gac.mutation.SetCookieToken(s)
	return gac
}

// SetNillableCookieToken sets the "cookie_token" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableCookieToken(s *string) *GameAccountCreate {
	if s != nil {
		gac.SetCookieToken(*s)
	}

	return gac
}

// SetStoken sets the "stoken" field.
func (gac *GameAccountCreate) SetStoken(s string) *GameAccountCreate {
	gac.mutation.SetStoken(s)
	return gac
}

// SetNillableStoken sets the "stoken" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableStoken(s *string) *GameAccountCreate {
	if s != nil {
		gac.SetStoken(*s)
	}

	return gac
}

// SetMid sets the "mid" field.
func (gac *GameAccountCreate) SetMid(s string) *GameAccountCreate {
	gac.mutation.SetMid(s)
	return gac
}

// SetNillableMid sets the "mid" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableMid(s *string) *GameAccountCreate {
	if s != nil {
		gac.SetMid(*s)
	}

	return gac
}

// SetCreateAt sets the "create_at" field.
func (gac *GameAccountCreate) SetCreateAt(t time.Time) *GameAccountCreate {
	gac.mutation.SetCreateAt(t)
	return gac
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableCreateAt(t *time.Time) *GameAccountCreate {
	if t != nil {
		gac.SetCreateAt(*t)
	}

	return gac
}

// SetUpdateAt sets the "update_at" field.
func (gac *GameAccountCreate) SetUpdateAt(t time.Time) *GameAccountCreate {
	gac.mutation.SetUpdateAt(t)
	return gac
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (gac *GameAccountCreate) SetNillableUpdateAt(t *time.Time) *GameAccountCreate {
	if t != nil {
		gac.SetUpdateAt(*t)
	}

	return gac
}

// SetID sets the "id" field.
func (gac *GameAccountCreate) SetID(i int64) *GameAccountCreate {
	gac.mutation.SetID(i)
	return gac
}

// Mutation returns the GameAccountMutation object of the builder.
func (gac *GameAccountCreate) Mutation() *GameAccountMutation {
	return gac.mutation
}

// Save creates the GameAccount in the database.
func (gac *GameAccountCreate) Save(ctx context.Context) (*GameAccount, error) {
	gac.defaults()
	return withHooks[*GameAccount, GameAccountMutation](ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GameAccountCreate) SaveX(ctx context.Context) *GameAccount {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}

	return v
}

// Exec executes the query.
func (gac *GameAccountCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GameAccountCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GameAccountCreate) defaults() {
	if _, ok := gac.mutation.GameToken(); !ok {
		v := gameaccount.DefaultGameToken
		gac.mutation.SetGameToken(v)
	}

	if _, ok := gac.mutation.CookieToken(); !ok {
		v := gameaccount.DefaultCookieToken
		gac.mutation.SetCookieToken(v)
	}

	if _, ok := gac.mutation.Stoken(); !ok {
		v := gameaccount.DefaultStoken
		gac.mutation.SetStoken(v)
	}

	if _, ok := gac.mutation.Mid(); !ok {
		v := gameaccount.DefaultMid
		gac.mutation.SetMid(v)
	}

	if _, ok := gac.mutation.CreateAt(); !ok {
		v := gameaccount.DefaultCreateAt()
		gac.mutation.SetCreateAt(v)
	}

	if _, ok := gac.mutation.UpdateAt(); !ok {
		v := gameaccount.DefaultUpdateAt()
		gac.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gac *GameAccountCreate) check() error {
	if _, ok := gac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`entity: missing required field "GameAccount.user_id"`)}
	}

	if _, ok := gac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`entity: missing required field "GameAccount.account_id"`)}
	}

	if v, ok := gac.mutation.AccountID(); ok {
		if err := gameaccount.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`entity: validator failed for field "GameAccount.account_id": %w`, err)}
		}
	}

	if _, ok := gac.mutation.GameToken(); !ok {
		return &ValidationError{Name: "game_token", err: errors.New(`entity: missing required field "GameAccount.game_token"`)}
	}

	if v, ok := gac.mutation.GameToken(); ok {
		if err := gameaccount.GameTokenValidator(v); err != nil {
			return &ValidationError{Name: "game_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.game_token": %w`, err)}
		}
	}

	if _, ok := gac.mutation.CookieToken(); !ok {
		return &ValidationError{Name: "cookie_token", err: errors.New(`entity: missing required field "GameAccount.cookie_token"`)}
	}

	if v, ok := gac.mutation.CookieToken(); ok {
		if err := gameaccount.CookieTokenValidator(v); err != nil {
			return &ValidationError{Name: "cookie_token", err: fmt.Errorf(`entity: validator failed for field "GameAccount.cookie_token": %w`, err)}
		}
	}

	if _, ok := gac.mutation.Stoken(); !ok {
		return &ValidationError{Name: "stoken", err: errors.New(`entity: missing required field "GameAccount.stoken"`)}
	}

	if _, ok := gac.mutation.Mid(); !ok {
		return &ValidationError{Name: "mid", err: errors.New(`entity: missing required field "GameAccount.mid"`)}
	}

	if v, ok := gac.mutation.Mid(); ok {
		if err := gameaccount.MidValidator(v); err != nil {
			return &ValidationError{Name: "mid", err: fmt.Errorf(`entity: validator failed for field "GameAccount.mid": %w`, err)}
		}
	}

	if _, ok := gac.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`entity: missing required field "GameAccount.create_at"`)}
	}

	if _, ok := gac.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`entity: missing required field "GameAccount.update_at"`)}
	}

	return nil
}

func (gac *GameAccountCreate) sqlSave(ctx context.Context) (*GameAccount, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}

	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}

		return nil, err
	}

	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}

	gac.mutation.id = &_node.ID
	gac.mutation.done = true

	return _node, nil
}

func (gac *GameAccountCreate) createSpec() (*GameAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &GameAccount{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(gameaccount.Table, sqlgraph.NewFieldSpec(gameaccount.FieldID, field.TypeInt64))
	)

	_spec.OnConflict = gac.conflict

	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}

	if value, ok := gac.mutation.UserID(); ok {
		_spec.SetField(gameaccount.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}

	if value, ok := gac.mutation.AccountID(); ok {
		_spec.SetField(gameaccount.FieldAccountID, field.TypeString, value)
		_node.AccountID = value
	}

	if value, ok := gac.mutation.GameToken(); ok {
		_spec.SetField(gameaccount.FieldGameToken, field.TypeString, value)
		_node.GameToken = value
	}

	if value, ok := gac.mutation.CookieToken(); ok {
		_spec.SetField(gameaccount.FieldCookieToken, field.TypeString, value)
		_node.CookieToken = value
	}

	if value, ok := gac.mutation.Stoken(); ok {
		_spec.SetField(gameaccount.FieldStoken, field.TypeString, value)
		_node.Stoken = value
	}

	if value, ok := gac.mutation.Mid(); ok {
		_spec.SetField(gameaccount.FieldMid, field.TypeString, value)
		_node.Mid = value
	}

	if value, ok := gac.mutation.CreateAt(); ok {
		_spec.SetField(gameaccount.FieldCreateAt, field.TypeTime, value)
		_node.CreateAt = value
	}

	if value, ok := gac.mutation.UpdateAt(); ok {
		_spec.SetField(gameaccount.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}

	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameAccount.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (gac *GameAccountCreate) OnConflict(opts ...sql.ConflictOption) *GameAccountUpsertOne {
	gac.conflict = opts

	return &GameAccountUpsertOne{
		create: gac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gac *GameAccountCreate) OnConflictColumns(columns ...string) *GameAccountUpsertOne {
	gac.conflict = append(gac.conflict, sql.ConflictColumns(columns...))

	return &GameAccountUpsertOne{
		create: gac,
	}
}

type (
	// GameAccountUpsertOne is the builder for "upsert"-ing
	//  one GameAccount node.
	GameAccountUpsertOne struct {
		create *GameAccountCreate
	}

	// GameAccountUpsert is the "OnConflict" setter.
	GameAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *GameAccountUpsert) SetUserID(v int64) *GameAccountUpsert {
	u.Set(gameaccount.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateUserID() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *GameAccountUpsert) AddUserID(v int64) *GameAccountUpsert {
	u.Add(gameaccount.FieldUserID, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *GameAccountUpsert) SetAccountID(v string) *GameAccountUpsert {
	u.Set(gameaccount.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateAccountID() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldAccountID)
	return u
}

// SetGameToken sets the "game_token" field.
func (u *GameAccountUpsert) SetGameToken(v string) *GameAccountUpsert {
	u.Set(gameaccount.FieldGameToken, v)
	return u
}

// UpdateGameToken sets the "game_token" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateGameToken() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldGameToken)
	return u
}

// SetCookieToken sets the "cookie_token" field.
func (u *GameAccountUpsert) SetCookieToken(v string) *GameAccountUpsert {
	u.Set(gameaccount.FieldCookieToken, v)
	return u
}

// UpdateCookieToken sets the "cookie_token" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateCookieToken() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldCookieToken)
	return u
}

// SetStoken sets the "stoken" field.
func (u *GameAccountUpsert) SetStoken(v string) *GameAccountUpsert {
	u.Set(gameaccount.FieldStoken, v)
	return u
}

// UpdateStoken sets the "stoken" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateStoken() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldStoken)
	return u
}

// SetMid sets the "mid" field.
func (u *GameAccountUpsert) SetMid(v string) *GameAccountUpsert {
	u.Set(gameaccount.FieldMid, v)
	return u
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateMid() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldMid)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *GameAccountUpsert) SetUpdateAt(v time.Time) *GameAccountUpsert {
	u.Set(gameaccount.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameAccountUpsert) UpdateUpdateAt() *GameAccountUpsert {
	u.SetExcluded(gameaccount.FieldUpdateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameAccountUpsertOne) UpdateNewValues() *GameAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gameaccount.FieldID)
		}

		if _, exists := u.create.mutation.CreateAt(); exists {
			s.SetIgnore(gameaccount.FieldCreateAt)
		}
	}))

	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GameAccountUpsertOne) Ignore() *GameAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameAccountUpsertOne) DoNothing() *GameAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameAccountCreate.OnConflict
// documentation for more info.
func (u *GameAccountUpsertOne) Update(set func(*GameAccountUpsert)) *GameAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameAccountUpsert{UpdateSet: update})
	}))

	return u
}

// SetUserID sets the "user_id" field.
func (u *GameAccountUpsertOne) SetUserID(v int64) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *GameAccountUpsertOne) AddUserID(v int64) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateUserID() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GameAccountUpsertOne) SetAccountID(v string) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateAccountID() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateAccountID()
	})
}

// SetGameToken sets the "game_token" field.
func (u *GameAccountUpsertOne) SetGameToken(v string) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetGameToken(v)
	})
}

// UpdateGameToken sets the "game_token" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateGameToken() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateGameToken()
	})
}

// SetCookieToken sets the "cookie_token" field.
func (u *GameAccountUpsertOne) SetCookieToken(v string) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetCookieToken(v)
	})
}

// UpdateCookieToken sets the "cookie_token" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateCookieToken() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateCookieToken()
	})
}

// SetStoken sets the "stoken" field.
func (u *GameAccountUpsertOne) SetStoken(v string) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetStoken(v)
	})
}

// UpdateStoken sets the "stoken" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateStoken() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateStoken()
	})
}

// SetMid sets the "mid" field.
func (u *GameAccountUpsertOne) SetMid(v string) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateMid() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateMid()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GameAccountUpsertOne) SetUpdateAt(v time.Time) *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameAccountUpsertOne) UpdateUpdateAt() *GameAccountUpsertOne {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *GameAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for GameAccountCreate.OnConflict")
	}

	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameAccountUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}

	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameAccountUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}

	return id
}

// GameAccountCreateBulk is the builder for creating many GameAccount entities in bulk.
type GameAccountCreateBulk struct {
	config
	builders []*GameAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the GameAccount entities in the database.
func (gacb *GameAccountCreateBulk) Save(ctx context.Context) ([]*GameAccount, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GameAccount, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))

	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()

			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})

			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}

			mutators[i] = mut
		}(i, ctx)
	}

	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}

	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GameAccountCreateBulk) SaveX(ctx context.Context) []*GameAccount {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}

	return v
}

// Exec executes the query.
func (gacb *GameAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GameAccountCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameAccountUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (gacb *GameAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameAccountUpsertBulk {
	gacb.conflict = opts

	return &GameAccountUpsertBulk{
		create: gacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gacb *GameAccountCreateBulk) OnConflictColumns(columns ...string) *GameAccountUpsertBulk {
	gacb.conflict = append(gacb.conflict, sql.ConflictColumns(columns...))

	return &GameAccountUpsertBulk{
		create: gacb,
	}
}

// GameAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of GameAccount nodes.
type GameAccountUpsertBulk struct {
	create *GameAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameAccountUpsertBulk) UpdateNewValues() *GameAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gameaccount.FieldID)
			}

			if _, exists := b.mutation.CreateAt(); exists {
				s.SetIgnore(gameaccount.FieldCreateAt)
			}
		}
	}))

	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GameAccountUpsertBulk) Ignore() *GameAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameAccountUpsertBulk) DoNothing() *GameAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameAccountCreateBulk.OnConflict
// documentation for more info.
func (u *GameAccountUpsertBulk) Update(set func(*GameAccountUpsert)) *GameAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameAccountUpsert{UpdateSet: update})
	}))

	return u
}

// SetUserID sets the "user_id" field.
func (u *GameAccountUpsertBulk) SetUserID(v int64) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *GameAccountUpsertBulk) AddUserID(v int64) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateUserID() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateUserID()
	})
}

// SetAccountID sets the "account_id" field.
func (u *GameAccountUpsertBulk) SetAccountID(v string) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateAccountID() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateAccountID()
	})
}

// SetGameToken sets the "game_token" field.
func (u *GameAccountUpsertBulk) SetGameToken(v string) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetGameToken(v)
	})
}

// UpdateGameToken sets the "game_token" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateGameToken() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateGameToken()
	})
}

// SetCookieToken sets the "cookie_token" field.
func (u *GameAccountUpsertBulk) SetCookieToken(v string) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetCookieToken(v)
	})
}

// UpdateCookieToken sets the "cookie_token" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateCookieToken() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateCookieToken()
	})
}

// SetStoken sets the "stoken" field.
func (u *GameAccountUpsertBulk) SetStoken(v string) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetStoken(v)
	})
}

// UpdateStoken sets the "stoken" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateStoken() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateStoken()
	})
}

// SetMid sets the "mid" field.
func (u *GameAccountUpsertBulk) SetMid(v string) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetMid(v)
	})
}

// UpdateMid sets the "mid" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateMid() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateMid()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *GameAccountUpsertBulk) SetUpdateAt(v time.Time) *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *GameAccountUpsertBulk) UpdateUpdateAt() *GameAccountUpsertBulk {
	return u.Update(func(s *GameAccountUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *GameAccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entity: OnConflict was set for builder %d. Set it on the GameAccountCreateBulk instead", i)
		}
	}

	if len(u.create.conflict) == 0 {
		return errors.New("entity: missing options for GameAccountCreateBulk.OnConflict")
	}

	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
